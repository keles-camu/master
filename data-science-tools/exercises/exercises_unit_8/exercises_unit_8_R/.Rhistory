# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
df$host_is_superhost = recode(df$host_is_superhost, 0 = 'SI', 1 = 'NO')
# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
library(car)
install.packages("car")
# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
library(car)
# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
library(carData)
df$host_is_superhost = recode(df$host_is_superhost, '0 = SI, 1 = NO')
# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
library(carData)
df$host_is_superhost = recode(df$host_is_superhost, '0' = 'SI', '1' = 'NO')
head(df$host_is_superhost)
# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
library(carData)
df$host_is_superhost = recode(df$host_is_superhost, '0' = 'SI', '1' = 'NO')
head(df_sample)
# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
library(carData)
df_sample = recode(df$host_is_superhost, '0' = 'SI', '1' = 'NO')
head(df_sample)
# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
library(carData)
df_sample = recode(df$host_is_superhost, '0' = 'SI', '1' = 'NO')
head(df_sample)
# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
installed.packages("car")
df$host_is_superhost = recode(df$host_is_superhost, '0' = 'SI', '1' = 'NO')
head(df$host_is_superhost)
# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
installed.packages("car")
df_sample = recode(df$host_is_superhost, '0' = 'SI', '1' = 'NO')
head(df_sample)
# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
installed.packages("car")
df_sample = recode(df$host_is_superhost, '0' = 'SI', '1' = 'NO')
head(df_sample)
# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
installed.packages("car")
df_sample = recode(df$host_is_superhost, '0' = 'SI', '1' = 'NO')
# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
installed.packages("car")
library(car)
# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
installed.packages("car")
library(carData)
df_sample = recode(df$host_is_superhost, '0' = 'SI', '1' = 'NO')
# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
installed.packages("car")
library(carData)
df_sample = recode(df$host_is_superhost, '0' = 'SI', '1' = 'NO')
df_sample
# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
installed.packages("car")
library(carData)
df_sample = recode(df$host_is_superhost, '0' = 'SI', '1' = 'NO')
head(df_sample)
# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
installed.packages("car")
library(car)
install.packages("car")
# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
installed.packages("car")
df$host_is_superhost <- recode(df$host_is_superhost, '0 = SI; 1 = NO')
# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
installed.packages("car")
df$host_is_superhost <- recode(df$host_is_superhost, '0 = SI, 1 = NO')
# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
installed.packages("car")
df$host_is_superhost <- recode(df$host_is_superhost, '0 = SI; 1 = NO')
# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
installed.packages("car")
df$host_is_superhost <- recode(df$host_is_superhost, '0 = SI', '1 = NO')
# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
installed.packages("car")
df$host_is_superhost <- recode(df$host_is_superhost, '0 = SI', '1 = NO')
# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
library(car)
install.packages(c("vctrs","maxLik","miscTools","car","carData"))
install.packages(c("vctrs", "maxLik", "miscTools", "car", "carData"))
# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
library(car)
# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
library(car)
install.packages("car")
# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
df_sample$host_is_superhost <- recode(df_sample$host_is_superhost, '0' = 'SI', '1' = 'NO')
# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
df_sample$host_is_superhost <- recode(df_sample$host_is_superhost, '0' = 'SI', '1' = 'NO')
# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
df_sample$host_is_superhost <- recode(df_sample$host_is_superhost, "0" = "SI", "1" = "NO")
library(tidyr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(dplyr)
library(ggplot2)
# Cargar el archivo “Airbnb_Milan.csv” como dataframe.
df <- read.csv("Airbnb_Milan.csv", header = TRUE)
# Crear un nuevo dataframe que contenga únicamente las siguientes columnas: “host_is_superhost”, “host_identity_verified”, “bathrooms”, “bedrooms”, “daily_price”, “security_deposit”, “minimum_nights”, “number_of_reviews”, “review_scores_rating”.
df_sample <- subset(df, select = c("host_is_superhost", "host_identity_verified", "bathrooms", "bedrooms", "daily_price", "security_deposit", "minimum_nights", "number_of_reviews", "review_scores_rating"))
head(df_sample)
# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
df_sample$host_is_superhost <- recode(df_sample$host_is_superhost, "0" = "SI", "1" = "NO")
head(df_sample$host_is_superhost)
# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
df_sample$host_is_superhost <- recode(df_sample$host_is_superhost, "0" = "SI", "1" = "NO")
head(df_sample)
library(tidyr)
library(dplyr)
library(ggplot2)
# Cargar el archivo “Airbnb_Milan.csv” como dataframe.
df <- read.csv("Airbnb_Milan.csv", header = TRUE)
# Crear un nuevo dataframe que contenga únicamente las siguientes columnas: “host_is_superhost”, “host_identity_verified”, “bathrooms”, “bedrooms”, “daily_price”, “security_deposit”, “minimum_nights”, “number_of_reviews”, “review_scores_rating”.
df_sample <- subset(df, select = c("host_is_superhost", "host_identity_verified", "bathrooms", "bedrooms", "daily_price", "security_deposit", "minimum_nights", "number_of_reviews", "review_scores_rating"))
head(df_sample) # Comprobamos que los cambios se han aplicado en la submuestra creada
# Cambiar los factores de la variable "host_is_superhost" de 0, 1 a: "SI" y, "NO".
df_sample$host_is_superhost <- recode(df_sample$host_is_superhost, "0" = "SI", "1" = "NO")
head(df_sample) # Comprobamos que los cambios se han aplicado
# Cambiar los factores de la variable "host_identity_verified" de 0, 1 a: "VERIFICA" y "NO VERIFICA".
df_sample$host_identity_verified <- recode(df_sample$host_identity_verified, "0" = "VERIFICA", "1" = "NO VERIFICA")
head(df_sample) # Comprobamos que los cambios se han aplicado
summary(df_sample)
summary(df)
head(storms)
filter(df_sample, minimum_nights <= 7)
df %>% group_by(host_identity_verifie) %>% summarise(mean(daily_price))
df %>% group_by(host_identity_verifie) %>% summarise(mean_daily_price = mean(daily_price))
df %>% group_by(host_identity_verified) %>% summarise(mean_daily_price = mean(daily_price))
df_sample %>% group_by(host_identity_verified) %>% summarise(mean_daily_price = mean(daily_price))
df_sample %>% group_by(host_identity_verified) %>% summarise(mean_daily_price = mean(daily_price))
tapply(df_sample$host_is_superhost, sum)
df_sample %>% group_by(host_is_superhost) %>% summarise(sum_reviews = sum(number_of_reviews))
mean(summarise(sum_reviews = sum(number_of_reviews))
df_sample %>% group_by(host_is_superhost) %>% summarise(mean_reviews = mean(number_of_reviews))
# Concatenamos las siguientes funciones: primero, agrupamos los datos de la variable "host_identity_verified" y, a continuación, mostramos la estadística aplicada sobre la variable "daily_price", en este caso la media.
#df_sample %>% group_by(host_identity_verified) %>% summarise(mean_daily_price = mean(daily_price))
df_sample %>% select(host_identity_verified, daily_price) %>% group_by(host_identity_verified) %>% summarise(mean_daily_price = mean(daily_price))
# Se puede comprobar que ambos precios medios no varían de manera significativa en función de si el anfitrión tiene verificado o no su perfil.
# Realizamos este ejercicio de manera similar al anterior:
# df_sample %>% group_by(host_is_superhost) %>% summarise(sum_reviews = sum(number_of_reviews))
df_sample %>% select(host_identity_verified, number_of_review) %>% group_by(host_identity_verified) %>% summarise(sum_reviews = sum(number_of_reviews))
# Realizamos este ejercicio de manera similar al anterior:
# df_sample %>% group_by(host_is_superhost) %>% summarise(sum_reviews = sum(number_of_reviews))
df_sample %>% select(host_identity_verified, number_of_reviews) %>% group_by(host_identity_verified) %>% summarise(sum_reviews = sum(number_of_reviews))
# Un alojamiento categorizado como "super host" obtiene más reseñas (n = 204655) que un "no super host" (n = 164876).
# Realizamos este ejercicio de manera similar al anterior:
# df_sample %>% group_by(host_is_superhost) %>% summarise(sum_reviews = sum(number_of_reviews))
df_sample %>% select(host_is_superhost, number_of_reviews) %>% group_by(host_is_superhost) %>% summarise(sum_reviews = sum(number_of_reviews))
# Un alojamiento categorizado como "super host" obtiene más reseñas (n = 204655) que un "no super host" (n = 164876).
# Reutilizamos la estadística anterior, incluyendo la media:
#df_sample %>% group_by(host_is_superhost) %>% summarise(mean_reviews = mean(number_of_reviews))
df_sample %>% select(host_is_superhost, number_of_reviews) %>% group_by(host_is_superhost) %>% summarise(mean_reviews = mean(number_of_reviews))
# De manera más clara se comprueba a través de la media que un alojamiento categorizado como "super host" obtiene más reseñas (n = 204655) que un "no super host" (n = 164876).
# Reutilizamos la estadística anterior, incluyendo la media:
#df_sample %>% group_by(host_is_superhost) %>% summarise(mean_reviews = mean(number_of_reviews))
#df_sample %>% select(host_is_superhost, number_of_reviews) %>% group_by(host_is_superhost) %>% summarise(mean_reviews = mean(number_of_reviews))
df_sample %>% select(host_is_superhost, review_scores_ratings) %>% group_by(host_is_superhost) %>% summarise(mean_scores = mean(review_scores_rating))
# Reutilizamos la estadística anterior, incluyendo la media:
#df_sample %>% group_by(host_is_superhost) %>% summarise(mean_reviews = mean(number_of_reviews))
#df_sample %>% select(host_is_superhost, number_of_reviews) %>% group_by(host_is_superhost) %>% summarise(mean_reviews = mean(number_of_reviews))
df_sample %>% select(host_is_superhost, review_scores_ratings) %>% group_by(host_is_superhost) %>% summarise(mean_scores = mean(review_scores_ratings))
# Reutilizamos la estadística anterior, incluyendo la media:
#df_sample %>% group_by(host_is_superhost) %>% summarise(mean_reviews = mean(number_of_reviews))
#df_sample %>% select(host_is_superhost, number_of_reviews) %>% group_by(host_is_superhost) %>% summarise(mean_reviews = mean(number_of_reviews))
df_sample %>% select(host_is_superhost, review_scores_rating) %>% group_by(host_is_superhost) %>% summarise(mean_scores = mean(review_scores_rating))
# De manera más clara se comprueba a través de la media que un alojamiento categorizado como "super host" obtiene más reseñas (n = 204655) que un "no super host" (n = 164876).
# Reutilizamos la estadística anterior, incluyendo la media:
#df_sample %>% group_by(host_is_superhost) %>% summarise(mean_reviews = mean(number_of_reviews))
df_sample %>% select(host_is_superhost, number_of_reviews) %>% group_by(host_is_superhost) %>% summarise(mean_reviews = mean(number_of_reviews))
#df_sample %>% select(host_is_superhost, review_scores_rating) %>% group_by(host_is_superhost) %>% summarise(mean_scores = mean(review_scores_rating))
# De manera más clara se comprueba a través de la media que un alojamiento categorizado como "super host" obtiene más reseñas (n = 204655) que un "no super host" (n = 164876).
v.num <- c(10:20)
v.fact <- c("PAR", "IMPAR", "PAR", "IMPAR", "PAR", "IMPAR",
"PAR", "IMPAR", "PAR", "IMPAR", "PAR")
tapply(v.num, v.fact, sqrt)
tapply(v.num, v.fact, sum)
#df_sample$CATEGORIA <- factor(c("NO ACONSEJABLE", "ESTANDAR", "TOP"))
v.review <- c(0:49, 50:75, 76:100)
v.categoria <- c("NO ACONSEJABLE", "ESTANDAR", "TOP")
tapply(v.review, v.categoria)
df-sample$CATEGORIA <- factor(ifelse(df$review_scores_rating <= 49, "NO ACONSEJABLE", ifelse(df$review_scores_rating <= 75, "ESTANDAR", "TOP")))
df_sample$CATEGORIA <- factor(ifelse(df$review_scores_rating <= 49, "NO ACONSEJABLE", ifelse(df$review_scores_rating <= 75, "ESTANDAR", "TOP")))
head(df$CATEGORIA)
df_sample$CATEGORIA <- factor(ifelse(df_sample$review_scores_rating <= 49, "NO ACONSEJABLE", ifelse(df_sample$review_scores_rating <= 75, "ESTANDAR", "TOP")))
head(df_sample$CATEGORIA)
df_sample$CATEGORIA <- factor(ifelse(df_sample$review_scores_rating <= 49, "NO ACONSEJABLE", ifelse(df_sample$review_scores_rating <= 75, "ESTANDAR", "TOP")))
head(df_sample)
df_sample$CATEGORIA <- factor(ifelse(df_sample$review_scores_rating <= 49, "NO ACONSEJABLE", ifelse(df_sample$review_scores_rating <= 75, "ESTANDAR", "TOP")))
df_sample())
df_sample$CATEGORIA <- factor(ifelse(df_sample$review_scores_rating <= 49, "NO ACONSEJABLE", ifelse(df_sample$review_scores_rating <= 75, "ESTANDAR", "TOP")))
df_sample()
df_sample$CATEGORIA <- factor(ifelse(df_sample$review_scores_rating <= 49, "NO ACONSEJABLE", ifelse(df_sample$review_scores_rating <= 75, "ESTANDAR", "TOP")))
print(df_sample())
library(tidyr)
library(dplyr)
library(ggplot2)
df <- read.csv("Airbnb_Milan.csv", header = TRUE)
# Empleamos “subset", seleccionamos las columnas a tener en cuenta, simplemente copiando sus denominaciones del enunciado, y aplicamos el parámetro “select”:
df_sample <- subset(df, select = c("host_is_superhost", "host_identity_verified", "bathrooms", "bedrooms", "daily_price", "security_deposit", "minimum_nights", "number_of_reviews", "review_scores_rating"))
head(df_sample) # Comprobamos que los cambios se han aplicado en la muestra creada a partir del dataframe.
# El comando "recode" se encuentra en el paquete "car", instalado previamente en el entorno gráfico. Realizado esto, se aplica la función "recode" de la siguiente manera:
df_sample$host_is_superhost <- recode(df_sample$host_is_superhost, "0" = "SI", "1" = "NO")
head(df_sample) # Comprobamos que los cambios se han aplicado.
# Aplicamos la función "recode" como en el ejercicio anterior:
df_sample$host_identity_verified <- recode(df_sample$host_identity_verified, "0" = "VERIFICA", "1" = "NO VERIFICA")
head(df_sample) # Comprobamos que los cambios se han aplicado.
# La función “summary” devuelve un resumen estadístico de la muestra
summary(df_sample)
# Utilizamos la función "filter" de la librería "Dplyr".
filter(df_sample, minimum_nights <= 7)
# Tras aplicar el filtro, la longitud del dataframe se ha reducido de 9322 filas, como se puede comprobar en el ejercicio anterior, a 9005 filas.
# Concatenamos las siguientes funciones: primero, agrupamos los datos de la variable "host_identity_verified" y, a continuación, mostramos la estadística aplicada sobre la variable "daily_price", en este caso la media.
#df_sample %>% group_by(host_identity_verified) %>% summarise(mean_daily_price = mean(daily_price))
df_sample %>% select(host_identity_verified, daily_price) %>% group_by(host_identity_verified) %>% summarise(mean_daily_price = mean(daily_price))
# Se puede comprobar que ambos precios medios no varían de manera significativa en función de si el anfitrión tiene verificado o no su perfil.
# Realizamos este ejercicio de manera similar al anterior:
df_sample %>% select(host_is_superhost, number_of_reviews) %>% group_by(host_is_superhost) %>% summarise(sum_reviews = sum(number_of_reviews))
# Un alojamiento categorizado como "super host" obtiene más reseñas (n = 204655) que un "no super host" (n = 164876).
# Reutilizamos la estadística anterior, incluyendo la media:
df_sample %>% select(host_is_superhost, number_of_reviews) %>% group_by(host_is_superhost) %>% summarise(mean_reviews = mean(number_of_reviews))
# Un alojamiento categorizado como "super host" obtiene una media inferior (30.87) que un "no super host" (61.22). Por sí misma la media no dice
df_sample$CATEGORIA <- factor(ifelse(df_sample$review_scores_rating <= 49, "NO ACONSEJABLE", ifelse(df_sample$review_scores_rating <= 75, "ESTANDAR", "TOP")))
df_sample()
df_sample$CATEGORIA <- factor(ifelse(df_sample$review_scores_rating <= 49, "NO ACONSEJABLE", ifelse(df_sample$review_scores_rating <= 75, "ESTANDAR", "TOP")))
head(df_sample)
df_sample$CATEGORIA <- factor(ifelse(df_sample$review_scores_rating <= 49, "NO ACONSEJABLE", ifelse(df_sample$review_scores_rating <= 75, "ESTANDAR", "TOP")))
df_sample
table(df$CATEGORIA)
table(df_sample$CATEGORIA)
ggplot(df) +
geom_histogram(mapping = aes(daily_price), color = "red", fill = "lightblue", alpha = 0.6)
ggplot(df) +
geom_histogram(mapping = aes(daily_price), color = "red", fill = "lightblue", alpha = 0.8)
ggplot(df) +
geom_histogram(mapping = aes(daily_price), color = "red", fill = "lightblue", alpha = 0.6)
ggplot(df) +
geom_histogram(mapping = aes(daily_price), color = "red", fill = "lightblue", alpha = 0.6, binwidth = 0.02)
ggplot(df) +
geom_histogram(mapping = aes(daily_price), color = "red", fill = "lightblue", alpha = 0.6, binwidth = 0.04)
ggplot(df) +
geom_histogram(mapping = aes(daily_price), color = "red", fill = "lightblue", alpha = 0.6)
ggplot(df) +
geom_histogram(mapping = aes(daily_price), color = "red", fill = "lightblue", alpha = 0.6)+
ggtitle("Precio por día")
ggplot(df) +
geom_histogram(mapping = aes(daily_price), color = "red", fill = "lightblue", alpha = 0.6)
fig <- plot_ly(
x = c("Manzanas", "Naranajas", "Sandías"),
y = c(300, 245, 283),
name = "Ventas",
type = "bar"
)
ggplot(df_sample) +
geom_histogram(mapping = aes(daily_price), color = "red", fill = "lightblue", alpha = 0.6)
ggplot(df_sample) +
geom_point(mapping = aes(bedrooms, bathrooms)) + geom_smooth(aes(bedrooms, bathrooms))
ggplot(df_sample) +
geom_point(mapping = aes(bedrooms, bathrooms)) + geom_smooth(aes(bedrooms, bathrooms),  method = lm)
ggplot(df) +
geom_histogram(mapping = aes(number_of_reviews, fill = host_identity_verified, color = "red" )
ggplot(df) +
geom_histogram(mapping = aes(number_of_reviews, fill = host_identity_verified, color = "red")
ggplot(df) +
geom_histogram(mapping = aes(number_of_reviews, fill = host_identity_verified, color = "red")
ggplot(df_sample) +
geom_histogram(mapping = aes(number_of_reviews, fill = host_identity_verified, color = "red")
ggplot(df_sample) +
geom_histogram(mapping = aes(number_of_reviews, fill = host_identity_verified, color = "red")
ggplot(df_sample) +
geom_histogram(mapping = aes(number_of_reviews, fill = host_identity_verified, color = "red")
ggplot(df_sample) +
geom_histogram(mapping = aes(number_of_reviews, fill = host_identity_verified) color = "red")
ggplot(df_sample) +
geom_histogram(mapping = aes(number_of_reviews, fill = host_identity_verified) color = "red")
ggplot(df_sample) +
geom_histogram(mapping = aes(number_of_reviews, fill = host_identity_verified), color = "red")
ggplot(data = df_sample) +
geom_point(mapping = aes(x = security_deposit, y = CATEGORIA, fill =
host_is_superhost), color = "dodgerblue4")
ggplot(data = df_sample) +
geom_point(mapping = aes(x = security_deposit, y = CATEGORIA, fill =
host_is_superhost), color = state)
ggplot(data = df_sample) +
geom_point(mapping = aes(x = security_deposit, y = CATEGORIA, fill =
host_is_superhost), color = "dodgerblue4")
ggplot(data = df_sample) +
geom_point(mapping = aes(x = security_deposit, y = CATEGORIA, fill =
host_is_superhost), color = "deepskyblue4")
ggplot(data = df_sample) +
geom_point(mapping = aes(x = security_deposit, y = CATEGORIA, fill =
host_is_superhost), color = "deepskyblue4", type = "bar")
ggplot(data = df_sample) +
geom_point(mapping = aes(x = security_deposit, y = CATEGORIA, fill =
host_is_superhost))
ggplot(data = df_sample) +
geom_point(mapping = aes(x = security_deposit, y = CATEGORIA, alpha =
host_is_superhost), color = "deepskyblue4")
ggplot(data = df_sample) +
geom_point(mapping = aes(x = security_deposit, y = CATEGORIA, fill =
host_is_superhost), color = "deepskyblue4")
ggplot(data = df_sample) +
geom_point(mapping = aes(x = security_deposit, y = CATEGORIA, shape =
host_is_superhost), color = "deepskyblue4")
ggplot(data = df_sample) +
geom_point(mapping = aes(x = security_deposit, y = CATEGORIA, shape =
host_is_superhost))
ggplot(data = df_sample) +
geom_point(mapping = aes(x = security_deposit, y = CATEGORIA, shape =
host_is_superhost), color = "deepskyblue4")
df_sample[df_sample$minimum_nights <= 7,]
library(tidyr)
library(dplyr)
library(ggplot2)
df <- read.csv("Airbnb_Milan.csv", header = TRUE)
# Empleamos “subset", seleccionamos las columnas a tener en cuenta, simplemente copiando sus denominaciones del enunciado, y aplicamos el parámetro “select”:
df_sample <- subset(df, select = c("host_is_superhost", "host_identity_verified", "bathrooms", "bedrooms", "daily_price", "security_deposit", "minimum_nights", "number_of_reviews", "review_scores_rating"))
head(df_sample) # Comprobamos que los cambios se han aplicado en la muestra creada a partir del dataframe.
# El comando "recode" se encuentra en el paquete "car", instalado previamente en el entorno gráfico. Realizado esto, se aplica la función "recode" de la siguiente manera:
df_sample$host_is_superhost <- recode(df_sample$host_is_superhost, "0" = "SI", "1" = "NO")
head(df_sample) # Comprobamos que los cambios se han aplicado.
# Aplicamos la función "recode" como en el ejercicio anterior:
df_sample$host_identity_verified <- recode(df_sample$host_identity_verified, "0" = "VERIFICA", "1" = "NO VERIFICA")
head(df_sample) # Comprobamos que los cambios se han aplicado.
# La función “summary” devuelve un resumen estadístico de la muestra
summary(df_sample)
# Utilizamos la función "filter" de la librería "Dplyr".
filter(df_sample, minimum_nights <= 7)
# Tras aplicar el filtro, la longitud del dataframe se ha reducido de 9322 filas, como se puede comprobar en el ejercicio anterior, a 9005 filas.
df_sample[df_sample$minimum_nights <= 7,]
# Concatenamos las siguientes funciones: primero, seleccionamos las columnas a tener en cuenta aplicando el parámetro “select”, después agrupamos los datos de la variable "host_identity_verified" y, a continuación, mostramos la estadística aplicada sobre la variable "daily_price", en este caso la media.
df_sample %>% select(host_identity_verified, daily_price) %>% group_by(host_identity_verified) %>% summarise(mean_daily_price = mean(daily_price))
# Se puede comprobar que ambos precios medios no varían de manera significativa en función de si el anfitrión tiene verificado o no su perfil.
# Concatenamos las siguientes funciones: primero, seleccionamos las columnas a tener en cuenta, después agrupamos los datos de la variable "host_identity_verified" y, a continuación, mostramos la estadística aplicada sobre la variable "daily_price", en este caso la media.
df_sample %>% select(host_identity_verified, daily_price) %>% group_by(host_identity_verified) %>% summarise(mean_daily_price = mean(daily_price))
# Se puede comprobar que ambos precios medios no varían de manera significativa en función de si el anfitrión tiene verificado o no su perfil.
df_sample %>% select(host_is_superhost, number_of_reviews, review_scores_rating) %>% group_by(host_is_superhost) %>% summarise(max(number_of_reviews), media_scores = mean(review_scores_rating))
df_sample %>% select(host_is_superhost, number_of_reviews, review_scores_rating) %>% group_by(host_is_superhost) %>% summarise(max(number_of_reviews), mean_scores = mean(review_scores_rating))
df_sample %>% select(host_is_superhost, review_scores_rating) %>% group_by(host_is_superhost) %>% summarise(mean_scores = mean(review_scores_rating))
# Creamos el vector para ser incluido como una nueva columna, al que asignamos la sentencia condicional indicada en el enunciado. Lo hacemos a través de la función "ifelse", que es la versión vectorizada del condicional "if else".
df_sample$CATEGORIA <- factor(ifelse(df_sample$review_scores_rating <= 49, "NO ACONSEJABLE", ifelse(df_sample$review_scores_rating <= 75, "ESTANDAR", "TOP")))
df_sample # Comprobamos que los cambios se han aplicado.
# "table" muestra la frecuencia de los valores únicos de una variable.
table(df_sample$CATEGORIA)
# La mayor parte de los alojamientos obtienen la categoría de "Top", seguido por un valor bastante más inferior por la categoría "Estandar" y una reducida parte por la categoría "No aconsejable", de acuerdo a la puntuación de las reseñas.
ggplot(df_sample) +
geom_histogram(mapping = aes(daily_price), color = "red", fill = "lightblue", alpha = 0.6) +
ggtitle("Histograma de precio por día") +
xlab("precio por día") +
ylab("frecuencia")
df_sample %>% select(daily_price) %>% summarise(mean_daily_price = mean(daily_price))
mean_daily_price = mean(daily_price)
df_sample (mean_daily_price = mean(daily_price))
df_sample <- mean_daily_price = mean(daily_price))
ggplot(data = df) +
geom_point(mapping = aes(x = pervalue, y = population), color = "dodgerblue4")
# install.packages("ggplot2")
library(ggplot2)
summary(midwest)
str(midwest)
head(midwest)
library(tidyr)
library(dplyr)
df <- gather(midwest, "pop_category", "population", c(5:11, 17, 21))
df <- gather(df, "per_category", "pervalue", 5:17)
# La gran mayoría de estas variables podrían dejarse como as.character sin problema.
df <- df %>% transmute(
PID = as.factor(PID),
county = as.factor(county),
state = as.factor(state),
area = area,
inmetro = inmetro,
category = as.factor(category),
pop_category = as.factor(pop_category),
population = population,
per_category = as.factor(per_category),
pervalue = pervalue
)
summary(df)
colnames(df)
ggplot(data = df) +
geom_point(mapping = aes(x = pervalue, y = population))
ggplot(data = df) +
geom_point(mapping = aes(x = pervalue, y = population, color = state))
ggplot(data = df) +
geom_point(mapping = aes(x = pervalue, y = population), color = "dodgerblue4")
ggplot(data = df) +
geom_point(mapping = aes(x = pervalue, y = population, size = state))
ggplot(data = df) +
geom_point(mapping = aes(x = pervalue, y = population, alpha = state))
ggplot(data = df) +
geom_point(mapping = aes(x = pervalue, y = population, shape = state))
ggplot(data = sample_frac(df, 0.001)) +
geom_point(mapping = aes(x = pervalue, y = population, shape = state))
ggplot(df) +
geom_bar(mapping = aes(state, fill = state), color = "black")
ggplot(df) +
geom_boxplot(mapping = aes(x = pervalue, fill = state), outlier.colour = "red") + coord_flip()
ggplot(df) +
geom_density(mapping = aes(area), colour = "darkblue", fill = "darkblue", alpha = 0.4)
ggplot(df) +
geom_density(mapping = aes(area, fill=state), colour = "darkblue", alpha = 0.4)
ggplot(df) +
geom_histogram(mapping = aes(area), color = "red", fill = "lightblue", alpha = 0.6)
ggplot(df) +
geom_histogram(mapping = aes(area, fill = state), color = "red" )
ggplot(df) +
geom_histogram(mapping = aes(area), color = "blue", binwidth = 0.02)
ggplot(df) +
geom_histogram(mapping = aes(area), color = "blue", bins=100)
ggplot(df, aes(area)) +
geom_histogram(aes(y=..density..), color = "blue", bins=100) +
geom_density(colour = "darkblue", fill = "pink", alpha = 0.4)
ggplot(df) +
geom_histogram(mapping = aes(area, fill=state), color = "blue", position = "dodge")
ggplot(df) +
geom_histogram(mapping = aes(inmetro, fill=state), color = "blue", position = "dodge")
ggplot(df) +
geom_histogram(mapping = aes(area, fill=state), color = "blue", position = "identity")
ggplot(df) +
geom_freqpoly(mapping = aes(area, colour=state)) # fill no funciona
ggplot(df) +
geom_point(mapping = aes(population, area)) + geom_smooth(aes(population, area))
df_sample %>% select(host_is_superhost, number_of_reviews) %>% group_by(host_is_superhost) %>% summarise(mean(number_of_reviews))
df_sample %>% select(host_is_superhost, number_of_reviews) %>% group_by(host_is_superhost) %>% summarise(mean(number_of_reviews))
df_sample %>% select(host_is_superhost, review_scores_rating) %>% group_by(host_is_superhost) %>% sum(host_is_superhos))
df_sample %>% select(host_is_superhost, review_scores_rating) %>% group_by(host_is_superhost) %>% sum(host_is_superhos)
df_sample %>% select(host_is_superhost, review_scores_rating) %>% group_by(host_is_superhost) %>% sum(host_is_superhost)
sum(host_is_superhost)
sum($host_is_superhost)
print(sum(host_is_superhost))
df_sample %>% select(host_is_superhost, review_scores_rating) %>% group_by(host_is_superhost) %>% summarise(sum_scores = sum(review_scores_rating))
df_sample %>% select(host_is_superhost, review_scores_rating) %>% group_by(host_is_superhost) %>% summarise(sum_scores = sum(review_scores_rating))
df_sample %>% select(host_is_superhost, number_of_reviews) %>% group_by(host_is_superhost) %>% summarise(sum_reviews = sum(number_of_reviews))
df_sample %>% select(host_identity_verified, number_of_reviews) %>% group_by(host_identity_verified) %>% summarise(sum_reviews = sum(number_of_reviews))
df_sample %>% select(host_is_superhost, review_scores_rating) %>% group_by(host_is_superhost) %>% summarise(sum_scores = sum(host_is_superhost))
sum(df_sample$host_is_superhost)
table(df_sample$host_is_superhost)
# Aplicamos facetting para descomponer una gráfica en tantas gráficas como valores únicos tiene la variable "CATEGORIA".
ggplot(df_sample, mapping = aes(security_deposit)) +
geom_density(aes(fill=host_is_superhost)) +
facet_wrap( ~ CATEGORIA) +
ggtitle("Depósito en función de si el anfitrión es super host por cada valor de categoría") +   xlab("depósito de seguridad") +
ylab("frecuencia")
# A la luz del histograma se puede afirmar que la mayoría de los anfitriones están catalogados como "Top" y el depósito que se les entrega representa mayormente los valores más bajos. En todos los casos, la mayoría de los anfitriones se consideran "super host".
# Aplicamos facetting para descomponer una gráfica en tantas gráficas como valores únicos tiene la variable "CATEGORIA".
ggplot(df_sample, mapping = aes(security_deposit)) +
geom_point(aes(fill=host_is_superhost)) +
facet_wrap( ~ CATEGORIA) +
ggtitle("Depósito en función de si el anfitrión es super host por cada valor de categoría") +   xlab("depósito de seguridad") +
ylab("frecuencia")
# Aplicamos facetting para descomponer una gráfica en tantas gráficas como valores únicos tiene la variable "CATEGORIA".
ggplot(df_sample, mapping = aes(security_deposit)) +
geom_freqpoly(aes(fill=host_is_superhost)) +
facet_wrap( ~ CATEGORIA) +
ggtitle("Depósito en función de si el anfitrión es super host por cada valor de categoría") +   xlab("depósito de seguridad") +
ylab("frecuencia")
# A la luz del histograma se puede afirmar que la mayoría de los anfitriones están catalogados como "Top" y el depósito que se les entrega representa mayormente los valores más bajos. En todos los casos, la mayoría de los anfitriones se consideran "super host".
# Aplicamos facetting para descomponer una gráfica en tantas gráficas como valores únicos tiene la variable "CATEGORIA".
ggplot(df_sample, mapping = aes(security_deposit)) +
geom_bar(aes(fill=host_is_superhost)) +
facet_wrap( ~ CATEGORIA) +
ggtitle("Depósito en función de si el anfitrión es super host por cada valor de categoría") +   xlab("depósito de seguridad") +
ylab("frecuencia")
# A la luz del histograma se puede afirmar que la mayoría de los anfitriones están catalogados como "Top" y el depósito que se les entrega representa mayormente los valores más bajos. En todos los casos, la mayoría de los anfitriones se consideran "super host".
# Aplicamos facetting para descomponer una gráfica en tantas gráficas como valores únicos tiene la variable "CATEGORIA".
ggplot(df_sample, mapping = aes(security_deposit)) +
geom_freqpoly(aes(fill=host_is_superhost)) +
facet_wrap( ~ CATEGORIA) +
ggtitle("Depósito en función de si el anfitrión es super host por cada valor de categoría") +   xlab("depósito de seguridad") +
ylab("frecuencia")
# A la luz del histograma se puede afirmar que la mayoría de los anfitriones están catalogados como "Top" y el depósito que se les entrega representa mayormente los valores más bajos. En todos los casos, la mayoría de los anfitriones se consideran "super host".
# Aplicamos facetting para descomponer una gráfica en tantas gráficas como valores únicos tiene la variable "CATEGORIA".
ggplot(df_sample, mapping = aes(security_deposit)) +
geom_bar(aes(fill=host_is_superhost)) +
facet_wrap( ~ CATEGORIA) +
ggtitle("Depósito en función de si el anfitrión es super host por cada valor de categoría") +   xlab("depósito de seguridad") +
ylab("frecuencia")
# A la luz del histograma se puede afirmar que la mayoría de los anfitriones están catalogados como "Top" y el depósito que se les entrega representa mayormente los valores más bajos. En todos los casos, la mayoría de los anfitriones se consideran "super host".
ggplot(df_sample) +
geom_histogram(mapping = aes(number_of_reviews, fill = host_is_superhost), color = "red") +
ggtitle("Número de reseñas en función de si un usuario es verificado o no") +
xlab("número de reseñas") +
ylab("frecuencia")
# Como se muestra en el histograma, los anfitriones que no tienen verificado su perfil obtienen mayor número de reseñas que los que sí tienen verificado su perfil. En cualquier caso, la mayoría recibe menos de 100 de reseñas.
ggplot(df_sample) +
geom_histogram(mapping = aes(number_of_reviews, fill = host_identity_verified), color = "red") +
ggtitle("Número de reseñas en función de si un usuario es verificado o no") +
xlab("número de reseñas") +
ylab("frecuencia")
# Como se muestra en el histograma, los anfitriones que no tienen verificado su perfil obtienen mayor número de reseñas que los que sí tienen verificado su perfil. En cualquier caso, la mayoría recibe menos de 100 de reseñas.
ggplot(df_sample) +
geom_histogram(mapping = aes(number_of_reviews, fill = host_is_superhost), color = "red") +
ggtitle("Número de reseñas en función de si un usuario es verificado o no") +
xlab("número de reseñas") +
ylab("frecuencia")
# Como se muestra en el histograma, los anfitriones que no tienen verificado su perfil obtienen mayor número de reseñas que los que sí tienen verificado su perfil. En cualquier caso, la mayoría recibe menos de 100 de reseñas.
ggplot(df_sample) +
geom_histogram(mapping = aes(number_of_reviews, fill = host_identity_verified), color = "red") +
ggtitle("Número de reseñas en función de si un usuario es verificado o no") +
xlab("número de reseñas") +
ylab("frecuencia")
# Como se muestra en el histograma, los anfitriones que no tienen verificado su perfil obtienen mayor número de reseñas que los que sí tienen verificado su perfil. En cualquier caso, la mayoría recibe menos de 100 de reseñas.
mean(df_sample$number_of_reviews)
df_sample %>% select(host_is_superhost, security_deposit) %>% group_by(host_is_superhost) %>% summarise(sum_deposit = sum(security_deposit))
# Realizamos este ejercicio de manera similar al anterior, incluyendo como estadística a obtener el valor máximo del número de reseñas:
df_sample %>% select(host_is_superhost, number_of_reviews) %>% group_by(host_is_superhost) %>% summarise(sum(number_of_reviews))
# Un alojamiento categorizado como "no super host" ha obtenido un número de reseñas superior al número máximo de reseñas de un "super host".
# Realizamos este ejercicio de manera similar al anterior, incluyendo como estadística a obtener el valor máximo del número de reseñas:
df_sample %>% select(host_is_superhost, number_of_reviews) %>% group_by(host_is_superhost) %>% summarise(max(number_of_reviews))
# Un alojamiento categorizado como "no super host" ha obtenido un número de reseñas superior al número máximo de reseñas de un "super host".
