vec.1 <- sample(1:1000, 100, replace = T)
vec.2 <- sample(1:1000, 100, replace = T)
plot(vec.1, vec.2)
plot(vec.1, vec.2,
ylab = "Vector 2",
xlab = "Vector 1",
main = "Scatter plot X ~ Y")
plot(vec.1, vec.2,
ylab = "Vector 2",
xlab = "Vector 1",
main = "Scatter plot X ~ Y",
cex.lab = 1.5,
cex.main = 3,
col.lab = "red",
col.main = "blue")
plot(vec.1, vec.2,
ylab = "Vector 2",
xlab = "Vector 1",
main = "Scatter plot X ~ Y",
las = 1)
plot(vec.1, vec.2,
ylab = "Vector 2",
xlab = "Vector 1",
main = "Scatter plot X ~ Y",
las = 2)
plot(vec.1, vec.2,
ylab = "Vector 2",
xlab = "Vector 1",
main = "Scatter plot X ~ Y",
las = 3)
plot(vec.1, vec.2,
ylab = "Vector 2",
xlab = "Vector 1",
main = "Scatter plot X ~ Y",
las = 1,
type = 'p')
plot(vec.1, vec.2,
ylab = "Vector 2",
xlab = "Vector 1",
main = "Scatter plot X ~ Y",
las = 1,
type = 'l')
plot(vec.1, vec.2,
ylab = "Vector 2",
xlab = "Vector 1",
main = "Scatter plot X ~ Y",
las = 1,
type = 'b')
plot(vec.1, vec.2,
ylab = "Vector 2",
xlab = "Vector 1",
main = "Scatter plot X ~ Y",
las = 1,
type = 'c')
plot(vec.1, vec.2,
ylab = "Vector 2",
xlab = "Vector 1",
main = "Scatter plot X ~ Y",
las = 1,
type = 'o')
plot(vec.1, vec.2,
ylab = "Vector 2",
xlab = "Vector 1",
main = "Scatter plot X ~ Y",
las = 1,
type = 'h')
plot(vec.1, vec.2,
ylab = "Vector 2",
xlab = "Vector 1",
main = "Scatter plot X ~ Y",
las = 1,
type = 's')
v.1 <- 1:100
v.2 <- v.1^2
plot(v.1, v.2,
xlab = "Lineal",
ylab = "Cuadrática",
main = "Representación cuadrática",
col = 'blue')
plot(v.1, v.2,
xlab = "Lineal",
ylab = "Cuadrática",
main = "Representación cuadrática",
col = 'blue',
cex = 1)
plot(v.1, v.2,
xlab = "Lineal",
ylab = "Cuadrática",
main = "Representación cuadrática",
col = 'red',
cex = 5)
plot(v.1, v.2,
xlab = "Lineal",
ylab = "Cuadrática",
main = "Representación cuadrática",
col = 'blue',
type = "l",
lwd = 7)
plot(v.1, v.2,
xlab = "Lineal",
ylab = "Cuadrática",
main = "Representación cuadrática",
col = 'green',
type = "l",
lwd = 3,
lty = 3)
plot(v.1, v.2,
xlab = "Lineal",
ylab = "Cuadrática",
main = "Representación cuadrática",
col = 'darkgreen',
type = "l",
lwd = 3,
lty = 3)
legend("topleft", legend = c("Cuadrática ~ Lineal"),
col = c("darkgreen"),
lty=c(3),
lwd = 3,
title = "Leyenda")
par(mfrow=c(2,2))
# Fila 1, columna 1
plot(v.1, v.2,
xlab = "Lineal",
ylab = "Cuadrática",
main = "Representación cuadrática",
col = 'darkgreen',
type = "l",
lwd = 3,
lty = 3)
# Fila 2, columna 1
plot(fact)
# Fila 1, columna 2
plot(x, y)
# Fila 2, columna 2
plot(x, y)
pdf("Lineal_y_cuadrática.pdf")
plot(v.1, v.2,
xlab = "Lineal",
ylab = "Cuadrática",
main = "Representación cuadrática",
col = 'darkgreen',
type = "l",
lwd = 3,
lty = 3)
legend("topleft", legend = c("Cuadrática ~ Lineal"),
col = c("darkgreen"),
lty=c(3),
lwd = 3,
title = "Leyenda")
dev.off()
normal.values <-rnorm(1000,0,1) # Ver otras formas de la distribución normal https://stat.ethz.ch/R-manual/R-devel/library/stats/html/Normal.html
hist(normal.values,
ylab = "Frecuencia",
xlab = "Valores",
main = "Histograma",
col = "grey",
border = "blue")
boxplot(normal.values,
border = "darkgreen",
col = "darkseagreen",
main = "Boxplot",
las = 1,
outcol="darkred")
barplot(normal.values, border = rainbow(length(normal.values)))
v <- c(100, 32, 87, 57, 110)
barplot(v, main = "Diagrama de barras", xlab="Componentes", ylab="Valor", col = c("blue", "red", "green", "yellow", "tomato"))
hist(normal.values,
ylab = "Frecuencia",
xlab = "Valores",
main = "Histograma",
col = "grey",
border = "blue")
abline(v=mean(normal.values), lty = 2, lwd = 3, col = "darkgreen")
abline(v=median(normal.values), lty = 3, lwd = 3, col = "red")
hist(normal.values,
ylab = "Frecuencia",
xlab = "Valores",
main = "Histograma",
col = "grey",
border = "blue")
abline(h=mean(normal.values), lty = 2, lwd = 3, col = "darkgreen")
abline(v=median(normal.values), lty = 3, lwd = 3, col = "red")
hist(normal.values,
ylab = "Frecuencia",
xlab = "Valores",
main = "Histograma",
col = "grey",
border = "blue")
abline(v=mean(normal.values), lty = 2, lwd = 3, col = "darkgreen")
abline(v=median(normal.values), lty = 3, lwd = 3, col = "red")
set.seed(123)
a <- sample(1:100, 10, replace = F)
b <- sample(1:100, 10, replace = F)
plot(a,b, main = "A ~ B", las = 1)
points(a,b, col = "red")
lines(a,b, col = "darkblue")
abline(h=mean(b), lty = 3, lwd = 3, col = "forestgreen")
abline(v=mean(a), lty = 3, lwd = 3, col = "forestgreen")
# install.packages("ggplot2")
library(ggplot2)
summary(midwest)
str(midwest)
head(midwest)
library(tidyr)
library(dplyr)
df <- gather(midwest, "pop_category", "population", c(5:11, 17, 21))
df <- gather(df, "per_category", "pervalue", 5:17)
# La gran mayoría de estas variables podrían dejarse como as.character sin problema.
df <- df %>% transmute(
PID = as.factor(PID),
county = as.factor(county),
state = as.factor(state),
area = area,
inmetro = inmetro,
category = as.factor(category),
pop_category = as.factor(pop_category),
population = population,
per_category = as.factor(per_category),
pervalue = pervalue
)
summary(df)
colnames(df)
ggplot(data = df) +
geom_point(mapping = aes(x = pervalue, y = population))
ggplot(data = df) +
geom_point(mapping = aes(x = pervalue, y = population, color = state))
ggplot(data = df) +
geom_point(mapping = aes(x = pervalue, y = population), color = "dodgerblue4")
ggplot(data = df) +
geom_point(mapping = aes(x = pervalue, y = population, size = state))
ggplot(data = df) +
geom_point(mapping = aes(x = pervalue, y = population, alpha = state))
ggplot(data = df) +
geom_point(mapping = aes(x = pervalue, y = population, shape = state))
ggplot(data = sample_frac(df, 0.001)) +
geom_point(mapping = aes(x = pervalue, y = population, shape = state))
ggplot(df) +
geom_bar(mapping = aes(state, fill = state), color = "black")
ggplot(df) +
geom_boxplot(mapping = aes(x = pervalue, fill = state), outlier.colour = "red") + coord_flip()
ggplot(df) +
geom_density(mapping = aes(area), colour = "darkblue", fill = "darkblue", alpha = 0.4)
ggplot(df) +
geom_density(mapping = aes(area, fill=state), colour = "darkblue", alpha = 0.4)
ggplot(df) +
geom_histogram(mapping = aes(area), color = "red", fill = "lightblue", alpha = 0.6)
ggplot(df) +
geom_histogram(mapping = aes(area, fill = state), color = "red" )
ggplot(df) +
geom_histogram(mapping = aes(area), color = "blue", binwidth = 0.02)
ggplot(df) +
geom_histogram(mapping = aes(area), color = "blue", bins=100)
ggplot(df, aes(area)) +
geom_histogram(aes(y=..density..), color = "blue", bins=100) +
geom_density(colour = "darkblue", fill = "pink", alpha = 0.4)
ggplot(df) +
geom_histogram(mapping = aes(area, fill=state), color = "blue", position = "dodge")
ggplot(df) +
geom_histogram(mapping = aes(inmetro, fill=state), color = "blue", position = "dodge")
ggplot(df) +
geom_histogram(mapping = aes(area, fill=state), color = "blue", position = "identity")
ggplot(df) +
geom_freqpoly(mapping = aes(area, colour=state)) # fill no funciona
ggplot(df) +
geom_point(mapping = aes(population, area)) + geom_smooth(aes(population, area))
ggplot(df) +
geom_point(mapping = aes(population, area)) + geom_smooth(aes(population, area)) +
ggtitle("Población ~ área") +
xlab("Población") +
ylab("Área")
ggplot(df, mapping = aes(area)) +
geom_bar(aes(fill=state)) +
facet_wrap( ~ state)
# install.packages("plotly")
library(plotly)
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
# install.packages("plotly")
library(plotly)
x <- c(1, 2, 3, 8, 7, 5, 6)
y <- c(4, 5, 6, 2, 10 ,12, 5)
fig <- plot_ly (
x = x,
y = y,
type = "scatter"
)
install.packages("plotly")
# install.packages("plotly")
library(plotly)
# install.packages("plotly")
library(plotly)
x <- c(1, 2, 3, 8, 7, 5, 6)
y <- c(4, 5, 6, 2, 10 ,12, 5)
fig <- plot_ly (
x = x,
y = y,
type = "scatter"
)
fig.sizes <- plot_ly (
x = x,
y = y,
type = "scatter",
mode = "markers",
size = 3,
alpha = 0.9
)
# install.packages("plotly")
library(plotly)
x <- c(1, 2, 3, 8, 7, 5, 6)
y <- c(4, 5, 6, 2, 10 ,12, 5)
fig <- plot_ly (
x = x,
y = y,
type = "scatter"
)
fig
fig.sizes <- plot_ly (
x = x,
y = y,
type = "scatter",
mode = "markers",
size = 3,
alpha = 0.9
)
fig.sizes
fig.line <- plot_ly (
x = x,
y = y,
type = "scatter",
mode = "lines"
)
fig.line
fig.line <- plot_ly (
x = x,
y = y,
type = "scatter",
mode = "lines+markers"
)
fig.line
fig <- plot_ly(
data = iris, x = ~Sepal.Width, y = ~Petal.Width,
type = "scatter",
color = ~Species, size = ~Sepal.Width
)
fig
vec.1 <- c(1:100)
random_y <- rnorm(100, mean = 0)
data <- data.frame("norm_1" = vec.1,
"norm_2" =random_y)
fig <- plot_ly(data, x = ~norm_1, y = ~norm_2,
type = 'scatter',
mode = 'lines')
fig
fig.bar <- plot_ly (
x = x,
y = y,
type = "bar"
)
fig.bar
fig <- plot_ly(
x = c("Manzanas", "Naranajas", "Sandías"),
y = c(300, 245, 283),
name = "Ventas",
type = "bar"
)
fig
fig.bar <- plot_ly (
data = iris,
x = ~Sepal.Length,
y = ~Sepal.Width,
type = "bar",
color = ~Species
)
fig.bar
x <- c(1, 2, 3, 8, 7, 5, 6, 2, 4, 14, 16, 19, 23, 5, 8)
y <- c(4, 5, 6, 2, 10 ,12, 5, 9, 10, 11, 23, 4, 7, 6, 8)
f <- factor(c("VALUE1", "VALUE2", "VALUE1", "VALUE1", "VALUE2", "VALUE1", "VALUE1",
"VALUE1", "VALUE2", "VALUE1", "VALUE1", "VALUE2", "VALUE1", "VALUE1", "VALUE2"))
z <- sample(15:30, 15, replace = F)
d <- data.frame("x" = x, "y" = y, "f" = f, "z" = z)
fig <- plot_ly(iris, x = ~x, y = ~y,
text = ~f, color = ~f,
type = 'scatter', mode = 'markers',
marker = list(size = ~z, opacity = 0.5))
fig <- fig %>% layout(title = 'X ~ Y',
xaxis = list(title = "Vector X"),
yaxis = list(title = "Vector Y"))
fig
fig <- plot_ly(x = ~rnorm(500),
alpha = 0.6,
type = "histogram")
fig
fig <- plot_ly(alpha = 0.6)
fig <- fig %>% add_histogram(x = ~rnorm(500))
fig <- fig %>% add_histogram(x = ~rnorm(500) + 1)
fig <- fig %>% layout(barmode = "overlay") # "stack" | "group" | "overlay" | "relative"
fig
fig <- plot_ly(alpha = 0.6)
fig <- fig %>% add_histogram(x = ~rnorm(500))
fig <- fig %>% add_histogram(x = ~rnorm(500) + 1)
fig <- fig %>% layout(barmode = "stack") # parámetros de posición cuando hay más de un histograma: "stack" | "group" | "overlay" | "relative"
fig
fig <- plot_ly(alpha = 0.6)
fig <- fig %>% add_histogram(x = ~rnorm(500))
fig <- fig %>% add_histogram(x = ~rnorm(500) + 1)
fig <- fig %>% layout(barmode = "group") # parámetros de posición cuando hay más de un histograma: "stack" | "group" | "overlay" | "relative"
fig
fig <- plot_ly(alpha = 0.6)
fig <- fig %>% add_histogram(x = ~rnorm(500))
fig <- fig %>% add_histogram(x = ~rnorm(500) + 1)
fig <- fig %>% layout(barmode = "relative") # parámetros de posición cuando hay más de un histograma: "stack" | "group" | "overlay" | "relative"
fig
fig <- plot_ly(alpha = 0.6)
fig <- fig %>% add_histogram(x = ~rnorm(500))
fig <- fig %>% add_histogram(x = ~rnorm(500) + 1)
fig <- fig %>% layout(barmode = "overlay") # parámetros de posición cuando hay más de un histograma: "stack" | "group" | "overlay" | "relative"
fig
fig <- plot_ly(y = ~rnorm(50), type = "box") %>%
layout(title = "Boxplot",
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE))
fig
fig <- plot_ly(
data = iris,
labels = ~Species,
values = ~Sepal.Length,
type = 'pie'
) %>% layout(title = "Diagrama de sectores por Species",
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE))
fig
df <- read.csv("FB.csv")
df$Open
df[[2]]
df[["Open"]]
df[1]
class(df)
attach(df)
Date
# Suma de la variable Open
sum(df$Open)
# Mostramos las posiciones 3 a 8 de la variable Open
df$Open[3:8]
# Filtramos la variable open por todos los valores superiores o iguales que 40
df[df$Open >= 40, ]
# Seleccionamos las filas 100 a 110 de todas las columnas a excepción de la segunda y tercera
df[100:110, -c(2,3)]
df %>% select(Low, Close) %>% groupby(Low, Close)
arr = np.arange(0, 10).reshape(2,5) arr.ravel()
a = (100, 52, 84, 74, 96, 53)
library(tidyr)
library(dplyr)
library(ggplot2)
df <- read.csv("Airbnb_Milan.csv", header = TRUE)
# Empleamos “subset" y seleccionamos las columnas a tener en cuenta, simplemente copiando sus denominaciones del enunciado, a través del parámetro “select”:
df_sample <- subset(df, select = c("host_is_superhost", "host_identity_verified", "bathrooms", "bedrooms", "daily_price", "security_deposit", "minimum_nights", "number_of_reviews", "review_scores_rating"))
head(df_sample) # Comprobamos que los cambios se han aplicado en la muestra creada a partir del dataframe.
# El comando "recode" se encuentra en el paquete "car", instalado previamente en el entorno gráfico. Realizado esto, se aplica la función "recode" de la siguiente manera:
df_sample$host_is_superhost <- recode(df_sample$host_is_superhost, "0" = "SI", "1" = "NO")
head(df_sample) # Comprobamos que los cambios se han aplicado.
# Aplicamos la función "recode" como en el ejercicio anterior:
df_sample$host_identity_verified <- recode(df_sample$host_identity_verified, "0" = "VERIFICA", "1" = "NO VERIFICA")
head(df_sample) # Comprobamos que los cambios se han aplicado.
# La función “summary” devuelve un resumen estadístico de la muestra
summary(df_sample)
# Podemos filtrar la variable de la misma manera que indexamos un vector o bien utilizando la función "filter" de la librería "Dplyr" (aplicamos esta última).
# df_sample[df_sample$minimum_nights <= 7,]
filter(df_sample, minimum_nights <= 7)
# Tras aplicar el filtro, la longitud del dataframe se ha reducido de 9322 filas, como se puede comprobar en el ejercicio anterior, a 9005 filas.
# Concatenamos las siguientes funciones: primero, seleccionamos las columnas a tener en cuenta, después agrupamos los datos de la variable "host_identity_verified" y, a continuación, mostramos la estadística aplicada sobre la variable "daily_price", en este caso la media.
df_sample %>% select(host_identity_verified, daily_price) %>% group_by(host_identity_verified) %>% summarise(mean_daily_price = mean(daily_price))
# Se puede comprobar que ambos precios medios no varían de manera significativa en función de si el anfitrión tiene verificado o no su perfil.
# Realizamos este ejercicio de manera similar al anterior, incluyendo como estadística a obtener el valor máximo del número de reseñas:
df_sample %>% select(host_is_superhost, number_of_reviews) %>% group_by(host_is_superhost) %>% summarise(max(number_of_reviews))
# Un alojamiento categorizado como "no super host" ha obtenido un número de reseñas superior al número máximo de reseñas de un "super host".
# A pesar de la falta de claridad de la pregunta, entendemos que se desea obtener la puntuación media de las calificaciones obtenidas en las reseñas ("review_scores_rating") teniendo en cuenta, como en la cuestión anterior, las categorías de la variable "host_is_superhost". Esto se calcularía de manera semejante a los dos ejercicios precedentes.
df_sample %>% select(host_is_superhost, review_scores_rating) %>% group_by(host_is_superhost) %>% summarise(mean_scores = mean(review_scores_rating))
# La puntuación media de los alojamientos categorizados como "no super host" es superior (96.92) a la puntuación media de los alojamientos "super host" (91.61).
# Creamos el vector para ser incluido como una nueva columna, al que asignamos la sentencia condicional indicada en el enunciado. Lo hacemos a través de la función "ifelse", que es la versión vectorizada del condicional "if else".
df_sample$CATEGORIA <- factor(ifelse(df_sample$review_scores_rating <= 49, "NO ACONSEJABLE", ifelse(df_sample$review_scores_rating <= 75, "ESTANDAR", "TOP")))
df_sample # Comprobamos que los cambios se han aplicado.
# "table" muestra la frecuencia de los valores únicos de una variable.
table(df_sample$CATEGORIA)
# La mayor parte de los alojamientos obtienen la categoría de "Top", seguido por un valor bastante más inferior por la categoría "Estandar" y una reducida parte por la categoría "No aconsejable", de acuerdo a la puntuación de las reseñas.
ggplot(df_sample) +
geom_histogram(mapping = aes(daily_price), color = "red", fill = "lightblue", alpha = 0.6) +
ggtitle("Histograma de precio por día") +
xlab("precio por día") +
ylab("frecuencia")
# Atendiendo a la gráfica, se puede decir que la mayoría de los alojamientos comparten un precio por día semejante, con valores medios en torno a 103-104 aproximadamente, como se deduce del ejercicio 7.
# Para estudiar la relación entre los dormitorios y los baños, realizamos una regresión lineal, incluyendo smooth.
ggplot(df_sample) +
geom_point(mapping = aes(x = bedrooms, y = bathrooms)) + geom_smooth(aes(bedrooms, bathrooms),  method = lm) +
ggtitle("Relación entre dormitorios y baños") +
xlab("número de dormitorios") +
ylab("número de baños")
# Se puede decir que hay una relación significativa entre el número de dormitorios y el de baños de los alojamientos pues, en general, a mayor número de los primeros tienden a aumentar los segundos.
ggplot(df_sample) +
geom_histogram(mapping = aes(number_of_reviews, fill = host_identity_verified), color = "red") +
ggtitle("Número de reseñas en función de si un usuario es verificado o no") +
xlab("número de reseñas") +
ylab("frecuencia")
# Como se muestra en el histograma, los anfitriones que no tienen verificado su perfil obtienen mayor número de reseñas que los que sí tienen verificado su perfil. En cualquier caso, la mayoría recibe menos de 50 de reseñas.
# Aplicamos facetting para descomponer una gráfica en tantas gráficas como valores únicos tiene la variable "CATEGORIA".
ggplot(df_sample, mapping = aes(security_deposit)) +
geom_bar(aes(fill=host_is_superhost)) +
facet_wrap( ~ CATEGORIA) +
ggtitle("Depósito en función de si el anfitrión es super host por cada valor de categoría") +   xlab("depósito de seguridad") +
ylab("frecuencia")
# A la luz del histograma se puede afirmar que la mayoría de los anfitriones están catalogados como "Top", tal y como se comprobó en el ejercicio 11. En relación con esto, la mayoría de los anfitriones se consideran "super host". En todos los casos, el depósito que se les entrega a los anfitriones representa los valores más bajos.
