# install.packages("dplyr")
library(dplyr)
data("airquality")
head(airquality)
select(airquality, Ozone, Solar.R, Wind)
filter(airquality, Temp > 70) # filtramos los registros con temperatura superior a 70
filter(airquality, Temp > 80 & Month > 5) # igual pero añadimos la condición mes superior a 5
arrange(airquality, desc(Month), Day) #ordena según mes (de manera descendente) y por día (de manera ascendente)
arrange(airquality, desc(Month), Day) # ordena según mes (de manera descendente) y por día (de manera ascendente)
mutate(airquality, TempInC = (Temp - 32) * 5 / 9) #transformamos una columna
mutate(airquality, TempInC = (Temp - 32) * 5 / 9) # Creamos la variable TempInC a partir de la variable Temp
group_by(airquality, Month)
group_by(airquality, Month)
summarise(airquality, mean(Temp, na.rm = TRUE)) # calcula la media de la temperatura ignorando valores faltantes
summarise(group_by(airquality, Month), mean(Temp, na.rm = TRUE)) # agrupa por mes y calcula la temperatura media en dicho mes
summarise(group_by(airquality, Month), mean(Temp, na.rm = TRUE)) # agrupa por mes y calcula la temperatura media en dicho mes
IDs <- c("0001", "0002", "0003")
nombres <- c("Álvaro", "Miriam", "Laura")
colores_fav <- c("Azul marino", "Lila", "Azul turquesa")
master <- data.frame(IDs, nombres)
colores <- data.frame(IDs, colores_fav)
left_join(master, colores, by=IDs)
colores
master
IDs <- c("0001", "0002", "0003")
nombres <- c("Álvaro", "Miriam", "Laura")
colores_fav <- c("Azul marino", "Lila", "Azul turquesa")
master <- data.frame(IDs, nombres)
colores <- data.frame(IDs, colores_fav)
master
colores
left_join(master, colores, by="IDs")
count(airquality, Month) #cuenta las apariciones de cada categoría de una columna
IDs <- c("0001", "0002", "0003", "0004")
nombres <- c("Álvaro", "Miriam", "Laura", "Jorge")
colores_fav <- c("Azul marino", "Lila", "Azul turquesa")
master <- data.frame(IDs, nombres)
colores <- data.frame(IDs, colores_fav)
IDs <- c("0001", "0002", "0003", "0004")
nombres <- c("Álvaro", "Miriam", "Laura", "Jorge")
colores_fav <- c("Azul marino", "Lila", "Azul turquesa", null)
IDs <- c("0001", "0002", "0003", "0004")
nombres <- c("Álvaro", "Miriam", "Laura", "Jorge")
colores_fav <- c("Azul marino", "Lila", "Azul turquesa", ?)
IDs <- c("0001", "0002", "0003")
nombres <- c("Álvaro", "Miriam", "Laura")
colores_fav <- c("Azul marino", "Lila", "Azul turquesa")
master <- data.frame(IDs, nombres)
colores <- data.frame(IDs, colores_fav)
master
colores
left_join(master, colores, by="IDs")
count(airquality, Month) #cuenta el número de registros para cada valor del variable Month
airquality %>%
filter(Month != 5) %>% # filtra por meses distintos de 5
group_by(Month) %>% # agrupa por mes
summarise(mean(Temp, na.rm = TRUE)) # calcula la media
A <- array(1:20,dim=c(4,5))
A
help(apply)
apply(A,1,sum) # el valor 1 indica que se aplica la función por filas
apply(A,2,max) # el valor 2 indica que se aplica la función por columnas
apply(A,1,is.vector)
help(sapply)
help(sapply)
data(cars) #carga el dataset cars
help(cars) #descripción del dataset
cars
dim(cars) #dimensión de cars
summary(cars) #sumario express del mismo
help(sapply) #ayuda sobre sapply
sapply(cars,class) #devuelve la clase de cada columna
sapply(cars,log) #devuelve el logaritmo de cada columna
A <- array(1:20,dim=c(4,5))
A
help(apply)
apply(A,1,sum) # el valor 1 indica que se aplica la función por filas
apply(A,2,max) # el valor 2 indica que se aplica la función por columnas
apply(A,1,is.vector)
sapply(A,1,sum)
A <- array(1:20,dim=c(4,5))
A
help(apply)
apply(A,1,sum) # el valor 1 indica que se aplica la función por filas
apply(A,2,max) # el valor 2 indica que se aplica la función por columnas
apply(A,1,is.vector)
data(cars) #carga el dataset cars
help(cars) #descripción del dataset
cars
dim(cars) #dimensión de cars
summary(cars) #sumario express del mismo
help(sapply) #ayuda sobre sapply
sapply(cars,class) #devuelve la clase de cada columna
sapply(cars,log) #devuelve el logaritmo de cada columna
help(tapply)
hijos<-c(1,3,2,2,3,5,3,2,1,2,3,1,2,4,1,0)
prov<-c("lu","co","lu","po","co","or","co","lu","lu","po","co","or","co","co","lu","po")
provf<-factor(prov)
tapply(hijos,provf,mean) #hace la media por categorías relacionando las listas hijos y provf
data() #visualiza los datos disponibles
data("USArrests") #carga un dataset del repositorio de R
USArrests
write.csv(USArrests,"USArrests.csv") #escribe el dataset en .csv
write.csv(USArrests,"USArrests.csv",sep = ";") #escribe en .csv con separador ;
read.csv("USArrests.csv") #lee el dataset
dat <- read.csv("USArrests.csv",row.names = 'X')
dat
install.packages("dplyr")
library(dplyr)
help(sapply)
A <- array(1:20,dim=c(4,5))
A
help(apply)
apply(A,1,sum) # el valor 1 indica que se aplica la función por filas
apply(A,2,max) # el valor 2 indica que se aplica la función por columnas
apply(A,1,is.vector)
data("airquality")
head(airquality)
select(airquality, Ozone, Solar.R, Wind) # seleccionamos las variables Ozone, Solar.R y Wind
filter(airquality, Temp > 70) # filtramos los registros con temperatura superior a 70
filter(airquality, Temp > 80 & Month > 5) # igual pero añadimos la condición mes superior a 5
arrange(airquality, desc(Month), Day) # ordena según mes (de manera descendente) y por día (de manera ascendente)
mutate(airquality, TempInC = (Temp - 32) * 5 / 9) # Creamos la variable TempInC a partir de la variable Temp
summarise(airquality, mean(Temp, na.rm = TRUE)) # calcula la media de la temperatura ignorando valores faltantes
summarise(group_by(airquality, Month), mean(Temp, na.rm = TRUE)) # agrupa por mes y calcula la temperatura media en dicho mes
IDs <- c("0001", "0002", "0003")
nombres <- c("Álvaro", "Miriam", "Laura")
colores_fav <- c("Azul marino", "Lila", "Azul turquesa")
master <- data.frame(IDs, nombres)
colores <- data.frame(IDs, colores_fav)
master
colores
left_join(master, colores, by="IDs")
count(airquality, Month) #cuenta el número de registros para cada valor del variable Month
airquality %>%
filter(Month != 5) %>% # filtra por meses distintos de 5
group_by(Month) %>% # agrupa por mes
summarise(mean(Temp, na.rm = TRUE)) # calcula la media
func <- function(x,y){
#operaciones
#respuesta
return(x+y)
}
func(3,5)
func(c(1,3), c(5,10)) # función aplicada a vectores
x<-"M"
if (x=="H"){
print("Es hombre")
}else{print("Es mujer")}
func <- function(x,y){
#operaciones
#respuesta
return(x+y)
}
func(3,5)
func(c(1,3), c(5,10)) # función aplicada a vectores
for (i in 1:5){
print(i)
}
x<-"M"
if (x=="H"){
print("Es hombre")
}else{print("Es mujer")}
x <- c(1:20) # vector del 1 al 20
x
y <- numeric(length(x)) # vector con 20 ceros
y
for (i in 1:length(x)) if (x[i] == 3) y[i] <- 0 else y[i] <- 1
y
M$name #seleccionamos columnas
name <- c("Luis","Carmen", "Pedro"); edad <- c(15,10,30); altura <- c(1.65,1.85, 1.45)
M <- data.frame(name,edad, altura)
M
attributes(M) #nombres de las columnas y de las filas así como el tipo de dato
dim(M) #dimensión
colnames(M) #nombres de columnas
rownames(M) #nombres de filas
nrow(M) #número de filas
ncol(M) #número de columnas
str(M)
head(M)
M$name #seleccionamos columnas
M$edad
M$altura
M[1,] #selecciona primera fila
M[1,1:2] #selecciona de la primera fila las posiciones de la primera y segunda columna
M[,-1] #todo el dataframe salvo la última columna
M['altura'] #columna altura
M$altura <- c(1.9,2, 50) #modificamos los valores de la columna altura
M
M$peso <- 4*M$edad +2*cos(M$altura) #aplicamos transformaciones de columnas
M
subset(M,select=c(name,edad)) #otros modos de tomar subconjuntos
subset(M,subset=c(name=="Luis")) # seleccionamos aquellas filas en las que name == "Luis"
M[M$name=="Luis" & M$edad<20,] # seleccionamos filas empleando filtros
M$name #seleccionamos columnas
M$edad
M$altura
M[2]
M[1,] #selecciona primera fila
M[1,1:2] #selecciona de la primera fila las posiciones de la primera y segunda columna
M[,-1] #todo el dataframe salvo la última columna
M['altura'] #columna altura
M$altura <- c(1.9,2, 50) #modificamos los valores de la columna altura
M
M$peso <- 4*M$edad +2*cos(M$altura) #aplicamos transformaciones de columnas
M
subset(M,select=c(name,edad)) #otros modos de tomar subconjuntos
subset(M,subset=c(name=="Luis")) # seleccionamos aquellas filas en las que name == "Luis"
M[M$name=="Luis" & M$edad<20,] # seleccionamos filas empleando filtros
prov<-c("lu","co","lu","po","co","or","co","lu","lu","po","co","or","co","co","lu","po")
prov
class(prov) #esto es ahora mismo un vector compuesto por caracteres
provf<-factor(prov) #convertimos en factor
provf
class(provf)
levels(provf)
which(provf=="lu") # indica los índices donde se encuentra el valor "lu"
as.character(provf) # transforma de factor a strings
q <- factor(c('0.8','2.4','3.1')) # define un factor a partir de un vector
q
as.double(q) # transforma de factor a double
q # atención, nótese que la variable q original no se ve modificada
install.packages("plyr")
library(plyr) #carga la librería
help(plyr) #da información sobre la librería
count(provf) # cuenta el número de apariciones de cada valor
table(provf) #otra forma de contarlas
A <- array(1:20,dim=c(4,5)) # genera matriz de 4 filas x 5 columnas
A
class(A)
A[1,3] #extrae posición (1,3)
A[,1] #extrae columna 1
A[3,] #extrae fila 3
A[1:3, 2:5] #selecciona una submatriz con las filas entre 1 y 3 y columnas entre 2 y 5
nrow(A) # número filas
ncol(A) # número columnas
dim(A) #dimensión
t(A) #trasposición de la matriz
A*A #producto posición a posición
A^3 #potencia posición a posición
sin(A) #seno de la matriz
B<- A[1:2,1:2] #definimos una nueva matriz B
B
A
solve(B) #inversa de la matriz
B%*%solve(B) #producto matricial
ls() #lista todas las variables creadas
rm("A") #quita la variable A
ls()
rm(list=ls()) #quita todos los elementos en memoria
ls()
name <- c("Luis","Carmen", "Pedro"); edad <- c(15,10,30); altura <- c(1.65,1.85, 1.45)
M <- data.frame(name,edad, altura)
M
attributes(M) #nombres de las columnas y de las filas así como el tipo de dato
dim(M) #dimensión
colnames(M) #nombres de columnas
rownames(M) #nombres de filas
nrow(M) #número de filas
ncol(M) #número de columnas
str(M)
head(M)
M$name #seleccionamos columnas
M$edad
M$altura
M[2]
M[1,] #selecciona primera fila
M[1,1:2] #selecciona de la primera fila las posiciones de la primera y segunda columna
M[,-1] #todo el dataframe salvo la última columna
M['altura'] #columna altura
M$altura <- c(1.9,2, 50) #modificamos los valores de la columna altura
M
M$peso <- 4*M$edad +2*cos(M$altura) #aplicamos transformaciones de columnas
M
subset(M,select=c(name,edad)) #otros modos de tomar subconjuntos
subset(M,subset=c(name=="Luis")) # seleccionamos aquellas filas en las que name == "Luis"
M[M$name=="Luis" & M$edad<20,] # seleccionamos filas empleando filtros
M[2]
M$name #seleccionamos columnas
M$edad
M$altura
M[1,] #selecciona primera fila
M[1,1:2] #selecciona de la primera fila las posiciones de la primera y segunda columna
M[,-1] #todo el dataframe salvo la última columna
M['altura'] #columna altura
M$altura <- c(1.9,2, 50) #modificamos los valores de la columna altura
M
M$peso <- 4*M$edad +2*cos(M$altura) #aplicamos transformaciones de columnas
M
subset(M,select=c(name,edad)) #otros modos de tomar subconjuntos
subset(M,subset=c(name=="Luis")) # seleccionamos aquellas filas en las que name == "Luis"
M[M$name=="Luis" & M$edad<20,] # seleccionamos filas empleando filtros
