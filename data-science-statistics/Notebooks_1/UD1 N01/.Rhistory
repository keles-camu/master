geom_errorbar(aes(ymin=len-se, ymax=len+se), width=.1) +
geom_line() +
geom_point()
#propina en función de día
#el domingo pagan más en media pero el sábado hay más gente optimista con propinas altas
ggplot(tips, aes(day, tip)) +  geom_boxplot() + coord_flip()
# precio del diamante en función de la calidad
# podemos observar cómo existen multitud de observaciones que escapan donde están concentradas la mayoría
p <- ggplot(diamonds, aes(cut, price))
p + geom_boxplot()
libs <- c("ggplot2", "plyr")
lapply(libs, require, character.only = T)
data(mpg)
head(mpg)
str(mpg)
# en función del fabricante
qplot(data = mpg, x = displ, y = hwy, color = manufacturer)
# en función de la clase de vehículo
qplot(data = mpg, x = displ, y = hwy, color = class)
qplot(data = mpg, x = displ, y = hwy, color = manufacturer, facets = ~class)
myGG <- ggplot(mpg, aes(x = displ, y = hwy))
myGG + geom_point(aes(color = manufacturer)) + stat_smooth(method = lm, se = FALSE)
myGG <- ggplot(mpg, aes(x = displ, y = hwy))
myGG + geom_point(aes(color = manufacturer)) + stat_smooth(method = lm)
myGG + geom_point(aes(color = manufacturer)) + stat_smooth(method = lm, se = FALSE) +
facet_grid(class ~ .)
library(reshape2)
head(tips)
str(tips)
sp <- ggplot(tips, aes(x=total_bill, y=tip/total_bill)) + geom_point(shape=1)
sp
sp + facet_grid(sex ~ .)
sp + facet_grid(. ~ sex)
sp + facet_grid(sex ~ day)
sp + facet_wrap( ~ day, ncol=2)
# Histograma del valor de las cuentas
hp <- ggplot(tips, aes(x=total_bill)) + geom_histogram(binwidth=2,colour="white")
hp
# Histograma del valor de las cuentas divido por sexo y fumador/no fumador
hp + facet_grid(sex ~ smoker)
# Mismas subdivisiones pero dejando que la escala del eje Y varíe a lo largo de las subdivisiones con scales="free_y"
hp + facet_grid(sex ~ smoker, scales="free_y")
# Los paneles tienen la misma escala (la unidad ocupa lo mismo) pero diferentes rangos (por lo tanto los paneles varían de tamaño entre ellos)
hp + facet_grid(sex ~ smoker, scales="free", space="free")
df <- read.csv('UD2 N03 vgsales.csv')
df$Year <- ordered(df$Year)
df <- df[df$Year<2017,]
head(df)
str(df)
summary(df)
num_Sales <- df[,c("NA_Sales","EU_Sales","JP_Sales","Other_Sales","Global_Sales")]
apply(num_Sales,2,sum)/sum(df$Global_Sales)*100 # calculamos el nº de ventas por localización y las dividimos por el total de ventas
cor(num_Sales)
library(dplyr)
top_genre_year_global <- df %>%
group_by(Year, Genre) %>%
summarize(Revenue = sum(Global_Sales)) %>%
top_n(1)
# En este segundo df se evidencia que, en caso de empate, con la función top_n(1) se muestran todos los resultados empatados
top_genre_year_JP <- df %>%
group_by(Year, Genre) %>%
summarize(Revenue = sum(JP_Sales)) %>%
top_n(1)
top_genre_year_global
top_genre_year_JP
library(ggplot2)
ggplot(top_genre_year_global, aes(Year, Revenue, fill = Genre)) +
geom_bar(stat = "identity") +
ggtitle("Top de géneros con más recaudación cada año en el mundo") +
theme(axis.text.x = element_text(angle = 90, size = 10, vjust = 0.4),legend.position = "top")
ggplot(top_genre_year_JP, aes(Year, Revenue, fill = Genre)) +
geom_bar(stat = "identity") +
ggtitle("Top de géneros con más recaudación cada año en Japón") +
theme(axis.text.x = element_text(angle = 90, size = 10, vjust = 0.4),legend.position = "top")
EU_gen <- df[df$Year>=2008,] %>% group_by(Genre) %>%
summarize(Revenue = sum(EU_Sales))
NA_gen <- df[df$Year>=2008,] %>% group_by(Genre) %>%
summarize(Revenue = sum(NA_Sales))
JP_gen <- df[df$Year>=2008,] %>% group_by(Genre) %>%
summarize(Revenue = sum(JP_Sales))
Global_gen <- df[df$Year>=2008,] %>% group_by(Genre) %>%
summarize(Revenue = sum(Global_Sales))
Other_gen <- df[df$Year>=2008,] %>% group_by(Genre) %>%
summarize(Revenue = sum(Other_Sales))
NA_gen
EU_gen
ggplot(EU_gen,aes(x=Genre,y=Revenue))+geom_bar(stat='identity')+ ggtitle("Género de juegos vendidos en UE")+ylab("En millones")+theme(axis.text.x = element_text(angle = 90, size = 10, vjust = 0.4))
ggplot(NA_gen,aes(x=Genre,y=Revenue))+geom_bar(stat='identity')+ ggtitle("Género de juegos vendidos en NA")+ylab("En millones")+theme(axis.text.x = element_text(angle = 90, size = 10, vjust = 0.4))
ggplot(JP_gen,aes(x=Genre,y=Revenue))+geom_bar(stat='identity')+ ggtitle("Género de juegos vendidos en Japón")+ylab("En millones")+theme(axis.text.x = element_text(angle = 90, size = 10, vjust = 0.4))
ggplot(Other_gen,aes(x=Genre,y=Revenue))+geom_bar(stat='identity')+ ggtitle("Género de juegos vendidos en el resto del mundo")+ylab("En millones")+theme(axis.text.x = element_text(angle = 90, size = 10, vjust = 0.4))
#videos$Year <- factor(videos$Year,levels=c(1980:2015))
na <- df %>% select(Year,NA_Sales) %>% group_by(Year) %>% summarise(s=sum(NA_Sales))
eu <- df %>% select(Year,EU_Sales) %>% group_by(Year) %>% summarise(s=sum(EU_Sales))
jp <- df %>% select(Year,JP_Sales) %>%group_by(Year) %>% summarise(s=sum(JP_Sales))
oth <- df %>% select(Year,Other_Sales) %>% group_by(Year) %>% summarise(s=sum(Other_Sales))
data_sales <- data.frame(year = c(1980:2016),oth$s,jp$s,eu$s,na$s)
ggplot(data_sales, aes((year))) +
geom_line(aes(y = na$s , colour = "NA_Sales"),size=1) +
geom_line(aes(y = eu$s, colour = "EU_Sales"),size=1)+
geom_line(aes(y= jp$s ,colour='JP_Sales'),size=1)+
geom_line(aes(y=oth$s,colour='Other_Sales'),size=1)+ylab('Conteo en millones')+
scale_x_continuous(breaks = scales::pretty_breaks(n = 20))+
ggtitle("Evolución de ventas a lo largo del tiempo") +
theme(axis.text.x = element_text(angle = 90, size = 10, vjust = 0.4),legend.position = "top")
df <- read.csv('UD2 N05 TelcoChurn.csv')
head(df) # Visualizamos las primeras fiales del dataset
str(df) # Vemos el nº de observaciones así como el tipo de las variables y sus primeros valores
summary(df)
"{Los resultados más significativos de aplicar summary son los relativos a las variables numéricas:
tenure         MonthlyCharges    TotalCharges
Min.   : 0.00   Min.   : 18.25   Min.   :  18.8
1st Qu.: 9.00   1st Qu.: 35.50   1st Qu.: 401.4
Median :29.00   Median : 70.35   Median :1397.5
Mean   :32.37   Mean   : 64.76   Mean   :2283.3
3rd Qu.:55.00   3rd Qu.: 89.85   3rd Qu.:3794.7
Max.   :72.00   Max.   :118.75   Max.   :8684.8
NA's   :11
}"
df$SeniorCitizen <- as.factor(df$SeniorCitizen)
library(ggplot2)
# Churn vs gender: El dataset está perfectamente balanceado respecto a la variable sexo
# De este gráfico extraemos la conclusión de que el sexo del cliente no impacta en la propensión a churn
ggplot(data=df, aes(x=gender, fill=Churn) ) +
geom_histogram(position="identity", stat="count", color = "black")
# Churn vs SeniorCitizen: Por una parte, la proporción de clientes que son mayores es bastante baja,
# por otra parte detectamos que las personas mayores son bastante más propensas a cometer churn
ggplot(data=df, aes(x=SeniorCitizen, fill=Churn) ) +
geom_histogram( position="identity", stat="count", color = "black")
# Churn vs Partner: Existe una menor tendencia a churn en clientes que cuentan con pareja
ggplot(data=df, aes(x=Partner, fill=Churn) ) +
geom_histogram( position="identity", stat="count", color = "black")
# Churn vs Dependents: Si bien la proporción de clientes con personas dependientes es menor, se observa cómo estos
# son significativamente menos propensos a cometer churn
ggplot(data=df, aes(x=Dependents, fill=Churn) ) +
geom_histogram( position="identity", stat="count", color = "black")
# Churn vs tenure: histograma en bins de 2 meses
ggplot(df, aes(x=tenure, fill=Churn)) +
geom_histogram(binwidth=2, position="dodge", color = "black")
# Churn vs tenure: histograma en bins de 12 meses, i.e. 1 año
ggplot(df, aes(x=tenure, fill=Churn)) +
geom_histogram(binwidth=12, position="dodge", color = "black")
# tenure vs SeniorCitizen: histograma en bins de 12 meses, i.e. 1 año
ggplot(df, aes(x=tenure, fill=SeniorCitizen)) +
geom_histogram(binwidth=12, position="dodge", color = "black")
# Churn vs Contract
ggplot(data=df, aes(x=Contract, fill=Churn) ) +
geom_histogram( position="identity", stat="count", color = "black")
# Churn vs tenure: histograma en bins de 12 meses, i.e. 1 año
ChurnTenure12 <- ggplot(df, aes(x=tenure, fill=Churn)) +
geom_histogram(binwidth=12, position="dodge", color = "black")
# Churn vs tenure factorizado por las clases de Contract (faceting)
ChurnTenure12 + facet_grid(. ~ Contract)
# Contract vs PaperlessBilling
ggplot(data=df, aes(x=Contract, fill=PaperlessBilling) ) +
geom_histogram( position="identity", stat="count", color = "black")
# Contract vs PaymentMethod
ggplot(data=df, aes(x=Contract, fill=PaymentMethod) ) +
geom_histogram( position="identity", stat="count", color = "black")
# Churn vs PhoneService
ggplot(data=df, aes(x=PhoneService, fill=Churn) ) +
geom_histogram( position="identity", stat="count", color = "black")
# Churn vs InternetService
ggplot(data=df, aes(x=InternetService, fill=Churn) ) +
geom_histogram( position="identity", stat="count", color = "black")
# Churn vs MonthlyCharges
ggplot(df, aes(x=MonthlyCharges, fill=Churn)) +
geom_histogram(binwidth=20, position="dodge", color = "black")
# Churn vs TotalCharges
ggplot(df, aes(x=TotalCharges, fill=Churn)) +
geom_histogram(binwidth=200, position="dodge", color = "black")
# Scatterplot de MonthlyCharges vs TotalCharges
MonthlyTotalCharges <- ggplot(df, aes(x = MonthlyCharges, y = TotalCharges))
MonthlyTotalCharges + geom_point(alpha = 0.5)
# Scatterplot de MonthlyCharges vs TotalCharges con regresión lineal y conteo de la densidad
MonthlyTotalChargesReg <- MonthlyTotalCharges + stat_binhex() + scale_fill_gradient(low = "132B43", high = "red", breaks = c(0, 10, 25, 50, 75, 100), limits = c(0, 100)) + stat_smooth(method = lm) + ylim(0, 8700) # gracias al summary sabemos que max(MonthlyCharges) = 8684.8
MonthlyTotalChargesReg
# Scatterplot de MonthlyCharges vs TotalCharges con regresión lineal y conteo de la densidad factorizado por Churn (faceting)
MonthlyTotalChargesReg + facet_grid(. ~ Churn)
url <- "http://www.statsci.org/data/general/flicker.txt"
flicker <- read.csv(url,sep="\t")
write.csv(flicker,"UD3 N05 flicker.csv")
View(airquality)
# url <- 'https://online.stat.psu.edu/onlinecourses/sites/stat504/files/lesson07/crab.txt '
#df <- read.csv(url,header= F,sep = '\t')
#write.csv(df, 'crabs.csv')
#crab <- read.table(url)
crab <- read.csv("UD6 N01 crabs.csv", row.names = NULL, header = F)
crab
colnames(crab) <- c("Obs","C","S","W","Wt","Sa")
head(crab)
summary(crab)
crab <- crab[,-1]
dim(crab)
crab$C <- as.factor(crab$C)
crab$S <- as.factor(crab$S)
head(crab)
library(MASS)
model <- glm.nb(Sa~1, data = crab)
summary(model)
model$fitted
model$coefficients
model <- glm.nb(Sa~W, data = crab)
summary(model)
head(data.frame(crab,pred=model$fitted),20)
plot(crab$W,crab$Sa)
newdt <- data.frame(W=26.3)
predict(model, newdt,type="response")
fit1 <- glm.nb(Sa~., data=crab)
fit0 <- glm.nb(Sa~1, data=crab)
library(MASS)
step <-stepAIC(fit0,direction="forward",scope=list(upper=fit1,lower=fit0))
step
summary(step)
mod <- glm.nb(formula = Sa ~ Wt + C, data = crab, init.theta = 0.9556206187,
link = log)
exp(mod$coefficients)
data.frame(crab,pred=mod$fitted)
confint(mod)
# install.packages("faraway")
library(faraway)
data(wafer)
help(wafer)
head(wafer)
#observamos que toma valores positivos la variable objetivo
plot(density(wafer$resist))
summary(wafer)
res.lm.logY <- lm(log(resist) ~ x1 + x2 + x3 + x4, data = wafer)
summary(res.lm.logY)
res.glm.Gamma.log <- glm(formula = resist ~ x1 + x2 + x3 + x4,
family  = Gamma(link = "log"),
data    = wafer)
summary(res.glm.Gamma.log)
hist(res.lm.logY$residuals)
hist(res.glm.Gamma.log$residuals)
res.glm.Gamma.identity <- glm(formula = resist ~ x1 + x2 + x3 + x4,
family  = Gamma(link = "identity"),
data    = wafer)
summary(res.glm.Gamma.identity)
hist(res.glm.Gamma.identity$residuals)
res.glm.Gamma.inverse <- glm(formula = resist ~ x1 + x2 + x3 + x4,
family  = Gamma(link = "inverse"),
data    = wafer)
summary(res.glm.Gamma.inverse)
hist(res.glm.Gamma.inverse$residuals)
fit1 <- glm(resist~., data=wafer, family=Gamma(link = "inverse"))
fit0 <- glm(resist~1, data=wafer, family=Gamma(link = "inverse"))
library(MASS)
step <-stepAIC(fit0,direction="forward",scope=list(upper=fit1,lower=fit0))
step$coefficients
summary(step)
# install.packages(c("glmnet","ISLR"))
library(glmnet,help=T)
help("glmnet")
library(glmnet)
library("foreign")
data(iris)
dim(iris)
head(iris)
str(iris)
iris$Species <- as.numeric(iris$Species)
unique(iris$Species)
X <- as.matrix(subset(iris, select=- Species ))
y <- iris$Species
head(X)
mod <- glmnet(X, y, alpha=0, family = "multinomial",type.multinomial="ungrouped")
summary(mod)
print(mod)
plot(mod,xvar = "lambda", label = TRUE)
coef(mod,s=0)
coef(mod,s=0.1)
coef(mod,s=0.13)
coef(mod,s=0.29)
predict(mod,newx = X[1:2,],s=0,type = "response")
summary(mod)
cvfit <- cv.glmnet(X, y, alpha=0, family = "multinomial",type.multinomial="ungrouped")
plot(cvfit)
coef(cvfit, s = "lambda.min")
# install.packages("faraway")
library(faraway)
data(wafer)
help(wafer)
head(wafer)
#observamos que toma valores positivos la variable objetivo
plot(density(wafer$resist))
summary(wafer)
View(step)
View(wafer)
View(wafer)
# install.packages("faraway")
library(faraway)
data(wafer)
help(wafer)
head(wafer)
#observamos que toma valores positivos la variable objetivo
plot(density(wafer$resist))
summary(wafer)
write(data("wafer"), file = "wafer.csv")
write(data(wafer), file = "wafer.csv")
data(wafer)
wafer
write(wafer, file = "wafer.csv")
write.csv(wafer, 'wafer.csv')
write.csv(wafer, 'wafer.csv')
x<-c(1:10)
x
class(x)
length(x)
seq(1,9,by=2)
seq(1,9,length=6)
rep(3,10)
x<-c("a","e","i","o","u")
x
class(x)
x[5] <- NaN # añade un valor NaN en la posición 5
x
!is.na(x) # devuelve vector booleano detectando valores no faltantes
is.na(x) # devuelve vector booleano detectando valores faltantes
x[!is.na(x)] #elimina del vector los NaN (se seleccionan solo valor no faltantes)
which(is.nan(x)) # devuelve posición de los valores faltantes
x
x[x>0]
x[1:3] # de la posición 1 a la 3
x[-(1:3)] # complementario de la posición [1, 3], en este caso la posición {4}
x[c(T,F)] #coordenadas impares
x[c(F,T)] #coordenadas pares
c(TRUE, FALSE)
c(F, T)
!c(F,T)
c(F,T) == !c(T,F)
x<-c(1,-1,2,-2)
x>0
x
x[x>0]
x[1:3] # de la posición 1 a la 3
x[-(1:3)] # complementario de la posición [1, 3], en este caso la posición {4}
x[c(T,F)] #coordenadas impares
x[c(F,T)] #coordenadas pares
x[5] <- NaN # añade un valor NaN en la posición 5
x
!is.na(x) # devuelve vector booleano detectando valores no faltantes
is.na(x) # devuelve vector booleano detectando valores faltantes
x[!is.na(x)] #elimina del vector los NaN (se seleccionan solo valor no faltantes)
which(is.nan(x)) # devuelve posición de los valores faltantes
x[5] <- NaN # añade un valor NaN en la posición 5
x
!is.na(x) # devuelve vector booleano detectando valores no faltantes
is.na(x) # devuelve vector booleano detectando valores faltantes
x[is.na(x)] #elimina del vector los NaN (se seleccionan solo valor no faltantes)
which(is.nan(x)) # devuelve posición de los valores faltantes
x[5] <- NaN # añade un valor NaN en la posición 5
x
!is.na(x) # devuelve vector booleano detectando valores no faltantes
is.na(x) # devuelve vector booleano detectando valores faltantes
x[!is.na(x)] #elimina del vector los NaN (se seleccionan solo valor no faltantes)
which(is.nan(x)) # devuelve posición de los valores faltantes
x[5] <- NaN # añade un valor NaN en la posición 5
x
!is.na(x) # devuelve vector booleano detectando valores no faltantes
is.na(x) # devuelve vector booleano detectando valores faltantes
x[is.na(x)] #elimina del vector los NaN (se seleccionan solo valor no faltantes)
which(is.nan(x)) # devuelve posición de los valores faltantes
x[5] <- NaN # añade un valor NaN en la posición 5
x
!is.na(x) # devuelve vector booleano detectando valores no faltantes
is.na(x) # devuelve vector booleano detectando valores faltantes
x[!is.na(x)] #elimina del vector los NaN (se seleccionan solo valor no faltantes)
which(is.nan(x)) # devuelve posición de los valores faltantes
prov<-c("lu","co","lu","po","co","or","co","lu","lu","po","co","or","co","co","lu","po")
prov
class(prov) #esto es ahora mismo un vector compuesto por caracteres
provf<-factor(prov) #convertimos en factor
provf
class(provf)
levels(provf)
as.character(provf) # transforma de factor a strings
q <- factor(c('0.8','2.4','3.1')) # define un factor a partir de un vector
q
as.double(q) # transforma de factor a double
q # atención, nótese que la variable q original no se ve modificada
install.packages("plyr")
library(plyr) #carga la librería
help(plyr) #da información sobre la librería
count(provf) # cuenta el número de apariciones de cada valor
table(provf) #otra forma de contarlas
c(1,4,2,3,2,-10)
a <- c(1,2,3,4)
a
a+5
a-10
a*4
a^2
a/5
a-a
b <- a-10
b
sqrt(a)
exp(a)
log(a)
cos(a)
c <- (a + sqrt(a))/(exp(2)+1)
c
a+b
a*b
a/b
(a+3)/(sqrt(1-b)*2-1)
help(sqrt)
x<-c(1:10)
x
class(x)
length(x)
seq(1,9,by=2)
seq(1,9,length=6)
rep(3,10)
x<-c("a","e","i","o","u")
x
class(x)
a <- c(2,4,6,3,1,5)
b <- sort(a)
c <- sort(a,decreasing = TRUE)
a
b
c
c(TRUE, FALSE)
c(F, T)
!c(F,T)
c(F,T) == !c(T,F)
x<-c(1,-1,2,-2)
x>0
x
x[x>0]
x[1:3] # de la posición 1 a la 3
x[-(1:3)] # complementario de la posición [1, 3], en este caso la posición {4}
x[c(T,F)] #coordenadas impares
x[c(F,T)] #coordenadas pares
x[5] <- NaN # añade un valor NaN en la posición 5
x
!is.na(x) # devuelve vector booleano detectando valores no faltantes
is.na(x) # devuelve vector booleano detectando valores faltantes
x[!is.na(x)] #elimina del vector los NaN (se seleccionan solo valor no faltantes)
which(is.nan(x)) # devuelve posición de los valores faltantes
A <- array(1:20,dim=c(4,5)) # genera matriz de 4 filas x 5 columnas
A
class(A)
A[1,3] #extrae posición (1,3)
A[,1] #extrae columna 1
A[3,] #extrae fila 3
A[1:3, 2:5] #selecciona una submatriz con las filas entre 1 y 3 y columnas entre 2 y 5
nrow(A) # número filas
ncol(A) # número columnas
dim(A) #dimensión
t(A) #trasposición de la matriz
A*A #producto posición a posición
A^3 #potencia posición a posición
sin(A) #seno de la matriz
B<- A[1:2,1:2] #definimos una nueva matriz B
B
A
solve(B) #inversa de la matriz
B%*%solve(B) #producto matricial
ls() #lista todas las variables creadas
rm("A") #quita la variable A
ls()
rm(list=ls()) #quita todos los elementos en memoria
ls()
name <- c("Luis","Carmen", "Pedro"); edad <- c(15,10,30); altura <- c(1.65,1.85, 1.45)
M <- data.frame(name,edad, altura)
M
attributes(M) #nombres de las columnas y de las filas así como el tipo de dato
dim(M) #dimensión
colnames(M) #nombres de columnas
rownames(M) #nombres de filas
nrow(M) #número de filas
ncol(M) #número de columnas
str(M)
head(M)
M$name #seleccionamos columnas
M$edad
M$altura
M[1,] #selecciona primera fila
M[1,1:2] #selecciona de la primera fila las posiciones de la primera y segunda columna
M[,-1] #todo el dataframe salvo la última columna
M['altura'] #columna altura
M$altura <- c(1.9,2, 50) #modificamos los valores de la columna altura
M
M$peso <- 4*M$edad +2*cos(M$altura) #aplicamos transformaciones de columnas
M
subset(M,select=c(name,edad)) #otros modos de tomar subconjuntos
subset(M,subset=c(name=="Luis")) # seleccionamos aquellas filas en las que name == "Luis"
M[M$name=="Luis" & M$edad<20,] # seleccionamos filas empleando filtros
Lst <- list(name="Fred", wife="Mary", no.children=3, child.ages=c(4,7,9))
Lst
Lst$name
Lst$wife
Lst$no.children
Lst$child.ages
length(Lst) #longitud
attributes(Lst) #atributos
names(Lst) #claves para acceder a los elementos
Lst[[1]] #también se puede acceder por posición
Lst[[4]]
Lst[[4]][3]
attach(Lst) #atamos la variable Lst de modo que sus componentes son variables globales
wife
no.children
child.ages
serie <- ts(1:10, start = 1959) #crea una serie que empieza en 1959, R lo interpreta como anual
serie
class(serie)
attributes(serie) #atributos
ts(1:47, frequency = 12, start = c(1959, 2)) #crea una serie con frecuencia mensual empezando en el segundo mes
ts(1:10, frequency = 4, start = c(1959, 3)) #frecuencia trimestral empezando en tercer trimestre
ts(matrix(rpois(36, 5), 12, 3), start=c(1961, 1), frequency=12) # donde rpois(n, lambda) ofrece n valores aleatorios que siguen una distribución de Poisson con valor lambda, se genera una matriz con dichos valores de dimensión 36 filas x 5 columnas y se define una serie temporal a partir de dicha matriz que comienza en el primer mes de 1961 con una frecuencia mensual
