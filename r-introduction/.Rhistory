exercise_3
#También se puede crear primero los vectores y luego unirlos:
e<-c(20,22,19)
p<-c(65,70,68)
a<-c(174,180,170)
exercise_3 <- matrix(c(e,p,a), ncol = 3, dimnames = list(c("Paco", "Pepe", "Kiko"), c("Edad", "Peso", "Altura")))
exercise_3
exercise_3[,"Edad"] #Igual a: exercise_3[,1]
exercise_3["Pepe",] #Igual a: exercise_3[2,]
rownames(exercise_3)
colnames(exercise_3)
lista <- list(1:3, "Ruben", pi, list(c(-1, -2), -5))
lista
names(lista) <- c("a", "b", "c", "d")
lista
str(lista)
lista <- list(a = 1:3, b = "Ruben", c = pi, d = list(c(-1, -2), -5)) #Se añade la etiqueta, en vez de usar la función names
#Método 1 []:
str(lista[1:2])
#Método 2 [[]] extrae un único componente de la lista:
str(lista[[1]])
#Método3 $ extrae elementos de una lista por medio de su nombre:
str(lista$a)
#Solución temario
edad <- round(rnorm(10,40,10))
edad
#Solución correcta
edad <- sample(10:40,10) #(inicio:final intervalo, n observaciones)
edad
ss <- rep(c(F,T),5)
ss
result_list <- list(Edad=edad, SeguridadSocial=ss)
result_list
Otra<-list(Numeros=1:20,Letras=letters[1:15])
Otra
li [[1]] <- "hola"
li [[4]] <- FALSE
li [[5]] <- pi
Otra [[1]] <- "hola"
Otra [[1]] <- "hola"
Otra [[4]] <- FALSE
Otra [[5]] <- pi
Otra [[5]] <- pi
lista <- list(1:3, "Ruben", pi, list(c(-1, -2), -5))
lista
names(lista) <- c("a", "b", "c", "d")
lista
str(lista)
lista <- list(a = 1:3, b = "Ruben", c = pi, d = list(c(-1, -2), -5)) #Se añade la etiqueta, en vez de usar la función names
#Método 1 []:
str(lista[1:2])
#Método 2 [[]] extrae un único componente de la lista:
str(lista[[1]])
#Método3 $ extrae elementos de una lista por medio de su nombre:
str(lista$a)
#Solución temario
edad <- round(rnorm(10,40,10))
edad
#Solución correcta
edad <- sample(10:40,10) #(inicio:final intervalo, n observaciones)
edad
ss <- rep(c(F,T),5)
ss
result_list <- list(Edad=edad, SeguridadSocial=ss)
result_list
Otra<-list(Numeros=1:20,Letras=letters[1:15])
Otra
Otra [[1]] <- "hola"
Otra [[1]] <- "hola"
Otra [[1]] <- "hola"
li [[1]] <- "hola"
lista <- list(1:3, "Ruben", pi, list(c(-1, -2), -5))
lista
names(lista) <- c("a", "b", "c", "d")
lista
str(lista)
lista <- list(a = 1:3, b = "Ruben", c = pi, d = list(c(-1, -2), -5)) #Se añade la etiqueta, en vez de usar la función names
#Método 1 []:
str(lista[1:2])
#Método 2 [[]] extrae un único componente de la lista:
str(lista[[1]])
#Método3 $ extrae elementos de una lista por medio de su nombre:
str(lista$a)
#Solución temario
edad <- round(rnorm(10,40,10))
edad
#Solución correcta
edad <- sample(10:40,10) #(inicio:final intervalo, n observaciones)
edad
ss <- rep(c(F,T),5)
ss
result_list <- list(Edad=edad, SeguridadSocial=ss)
result_list
Otra<-list(Numeros=1:20,Letras=letters[1:15])
Otra
familia <- list(Padre="Juan", Madre="María", NumHijos=3, NomHijos=c("Luis","Carlos","Eva"), Edades=c(7,5,3), Ciudad="Madrid") #Usamos vectores cuando tenemos más de un valor.
familia
familia$Padre
familia[[2]]
familia[[3]]
familia2 <- list (Hombre = "Pedro", Mujer = "María", Casados = TRUE, NumHijos = 4, EdadHijos = c(4, 7, 9, 2), NomHijos = c('Hugo', 'Paco', 'Luis', 'Mary'))
familia2
familia2$Hombre
familia2$Mujer
familia2[[5]]
familia2$NomHijos
familia2$NomHijos[1] #Para acceder a un valor dentro de un vector no hace falta doble []
listo <- list(a = 1:3, b = "Juan", c = pi, d = list(c(-1, -2), -5))
str(listo[[1]])
muestra <- sample(1:100, 20, 2) #Muestra de 20 observaciones del 1 al 100 en el que se pueden repetir hasta dos observaciones
muestra <- sample(1:100, 20, 2) #Muestra de 20 observaciones del 1 al 100 en el que se pueden repetir hasta dos observaciones
muestra <- sample(1:100, 20, 2) #Muestra de 20 observaciones del 1 al 100 en el que se pueden repetir hasta dos observaciones
muestra <- sample(1:100, 20, 2)
muestra <- sample(1:100, 20, 2)
(muestra <- sample(1:100, 20, 2))
(switch("media", media = mean(muestra), mediana = median(muestra))) #Si no coincide ninguno con "media" devuelve NULL-
observaciones <- sample(1:50, 100, replace= TRUE)
suma<-0
for(i in seq_along(observaciones)) {
suma <- observaciones[i] + suma
media <- suma/length(observaciones)
}
observaciones <- sample(1:50, 100, replace= TRUE)
(observaciones <- sample(1:50, 100, replace= TRUE))
suma<-0
for(i in seq_along(observaciones)) {
suma <- observaciones[i] + suma
media <- suma/length(observaciones)
}
(observaciones <- sample(1:50, 100, replace= TRUE))
(observaciones <- sample(1:50, 100, replace= TRUE))
suma<-0
for(i in seq_along(observaciones)) {
suma <- observaciones[i] + suma
media <- suma/length(observaciones)
}
suma<-0
for (i in seq_along(observaciones)) {
suma <- observaciones[i] + suma
media <- suma/length(observaciones)
}
suma<-0
for (i in seq_along(observaciones)) {
suma <- observaciones[i] + suma
media <- suma/length(observaciones)
}
(observaciones <- sample(1:50, 100, replace= TRUE))
suma<-0
for (i in seq_along(observaciones)) {
suma <- observaciones[i] + suma
media <- suma/length(observaciones)
}
(observaciones <- sample(1:50, 100, replace= TRUE))
suma<-0
for (i in seq_along(observaciones)) {
suma <- observaciones[i] + suma
media <- suma/length(observaciones)
}
(observaciones <- sample(1:50, 100, replace= TRUE))
suma<-0
for (i in seq_along(observaciones)) {
suma <- observaciones[i] + suma
media <- suma/length(observaciones)
}
suma<-0
for (i in seq_along(observaciones)) {
suma <- observaciones[i] + suma
media <- suma/length(observaciones)
}
suma<-0
for (i in seq_along(observaciones)) {
suma <- observaciones[i] + suma
media <- suma/length(observaciones)
}
suma<-0
for (i in seq_along(observaciones)) {
suma <- observaciones[i] + suma
media <- suma/length(observaciones)
}
suma<-0
for (i in seq_along(observaciones)) {
suma <- observaciones[i] + suma
media <- suma/length(observaciones)
}
suma<-0
for (i in seq_along(observaciones)) {
suma <- observaciones[i] + suma
media <- suma/length(observaciones)
}
suma<-0
for (i in seq_along(observaciones)) {
suma <- observaciones[i] + suma
media <- suma/length(observaciones)
}
observaciones
if(4 > 3) {
"Verdadero"
} else {
"Falso"
}
suma<-0
for (i in seq_along(observaciones)) {
suma <- observaciones[i] + suma
media <- suma/length(observaciones)
}
n = 1
while(n <= 5) {
print(n)
n = n + 1
}
n = 1
while(n <= 5) {
print(n)
n = n + 1
}
n = 1
while(n <= 5) {
print(n)
n = n + 1
}
suma<-0
i = 1
for (i in seq_along(observaciones)) {
suma <- observaciones[i] + suma
media <- suma/length(observaciones)
}
suma<-0
i = 1
for (i in seq_along(observaciones)) {
suma <- observaciones[i] + suma
media <- suma/length(observaciones)
}
suma=0
for (i in seq_along(observaciones)) {
suma <- observaciones[i] + suma
media <- suma/length(observaciones)
}
suma<-0
for (i in seq_along(observaciones)) {
suma <- observaciones[i] + suma
media <- suma/length(observaciones)
}
suma<-0
for (i in seq_along(observaciones)) {
suma <- observaciones[i] + suma
media <- suma/length(observaciones)
}
n = 1
repeat{
if (n <= 10) {
print(n)
n = n + 1
}  else{
break
}
}
suma=0
for (i in seq_along(observaciones)) {
suma <- observaciones[i] + suma
media <- suma/length(observaciones)
}
suma<-0
for (i in seq_along(observaciones)) {
suma <- observaciones[i] + suma
media <- suma/length(observaciones)
}
n = 20
repeat{
if (n <= 10) {
print(n)
n = n + 1
}  else{
break
}
}
n = 20
repeat{
if (n <= 10) {
print(n)
n = n + 1
}  else{
break
}
}
n = 10
repeat{
if (n <= 10) {
print(n)
n = n + 1
}  else{
break
}
}
n = 1
repeat{
if (n <= 10) {
print(n)
n = n + 1
}  else{
break
}
}
n = 6
while(n <= 5) {
print(n)
n = n + 1
}
n = 1
while(n <= 5) {
print(n)
n = n + 1
}
n = 11
repeat{
if (n <= 10) {
print(n)
n = n + 1
}  else{
break
}
}
n = 1
repeat{
if (n <= 10) {
print(n)
n = n + 1
}  else{
break
}
}
n <- 4
v1 <- c(1, 2, 3, 4)
v2 <- c(5, 6, 7, 8)
v3 <- vector(mode= "integer", length= length(n))
for(i in 1:n) {
v3[i] <- v1[i] + v2[i]
}
n <- 4
v1 <- c(1, 2, 3, 4)
v2 <- c(5, 6, 7, 8)
v3 <- vector(mode = "integer", length = length(n))
for (i in 1:n) {
v3[i] <- v1[i] + v2[i]
}
x <- 5
if (x %% 2 == 0) {
print ("x es par")
} else {
print ("x es impar")
}
v <- c(12, -3, 5, 18.7)
w <- c(12, 0.25, 77, exp(2))
s = 0
n = length(v)
for (i in 1:n) {s[i]=v[i]+w[i]}
s
v+w
c = 0
n = length (v)
for (i in 1:n){c = c + v [i]}
c
suma = 0
for (i in seq_along(observaciones)) {
suma <- observaciones[i] + suma
media <- suma/length(observaciones)
}
v <- c(12, -3, 5, 18.7)
w <- c(12, 0.25, 77, exp(2))
sum = 0
n = length(v)
for (i in 1:n) {sum[i]=v[i]+w[i]}
sum
v+w
v <- c(12, -3, 5, 18.7)
w <- c(12, 0.25, 77, exp(2))
sum = 0
n = length(v)
for (i in 1:n) {sum[i]=v[i]+w[i]}
sum
v <- c(12, -3, 5, 18.7)
w <- c(12, 0.25, 77, exp(2))
sum = 0
n = length(v)
for (i in 1:n) {sum[i]=v[i]+w[i]}
sum
v+w
suma = 0
for (i in seq_along(observaciones)) {
suma = observaciones[i] + suma
media = suma/length(observaciones)
}
if(4 > 3) {
"Verdadero"
} else {
"Falso"
}
(muestra <- sample(1:100, 20, 2)) #Muestra de 20 observaciones del 1 al 100 en el que se pueden repetir hasta dos observaciones
(switch("media", media = mean(muestra), mediana = median(muestra))) #Si no coincide ninguno con "media" devuelve NULL-
(observaciones <- sample(1:50, 100, replace= TRUE))
suma = 0
for (i in seq_along(observaciones)) {
sum = suma(observaciones[i])
media = sum/length(observaciones)
}
i = 0
for (i in seq_along(observaciones)) {
sum = suma(observaciones[i])
media = sum/length(observaciones)
}
suma = 0
i = 0
for (i in seq_along(observaciones)) {
sum = suma(observaciones[i])
media = sum/length(observaciones)
}
suma = 0
for (i in seq_along(observaciones)) {
suma <- observaciones[i] + suma
media <- suma/length(observaciones)
}
c = 0
n = length (v)
for (i in 1:n){c = c + v [i]}
c
v <- c(12, -3, 5, 18.7)
w <- c(12, 0.25, 77, exp(2))
sum = 0
n = length(v)
for (i in 1:n) {sum[i]=v[i]+w[i]}
sum
v+w
n = 1
repeat{
if (n <= 10) {
print(n)
n = n + 1
}  else{
break
}
}
z <- 5
if (z > 0) {
print ("z es positvo")
} else {
print ("z es negativo")
}
z <- -5
if (z > 0) {
print ("z es positvo")
} else {
print ("z es negativo")
}
z <- 5
if (z > 0) {
"z es positvo"
} else if (z < 0) {
"z es negativo"
} else {
"nulo o cero"
}
z <- 0
if (z > 0) {
"z es positvo"
} else if (z < 0) {
"z es negativo"
} else {
"nulo o cero"
}
z <- -9
if (z > 0) {
"z es positvo"
} else if (z < 0) {
"z es negativo"
} else {
"nulo o cero"
}
z <- -2
if (z > 0) {
"z es positvo"
} else if (z < 0) {
"z es negativo"
} else {
"nulo o cero"
}
for (i in 1:10){
if (i = 4){
for (i in 1:10){
if (i == 4){
break
}else{
print (i)
}
}
x <- switch ( 3, "uno", "dos", "tres", "cuatro" )
a <- switch ( 3, "uno", "dos", "tres", "cuatro" )
j <- switch (3, "uno", "dos", "tres", "cuatro")
j <- switch (3, "uno", "dos", "tres", "cuatro")
j
x <- 1 repeat {
x <- 1 repeat {
x <- 1 repeat {
x <- -5
y <- if(x > 0) 5 else 6
x <- -5
y <- if(x > 0)
5 else 6
j <- switch (3, "uno", "dos", "tres", "cuatro")
j
c = 0
n = length (v)
for (i in 1:n) {c = c + v [i]}
c
